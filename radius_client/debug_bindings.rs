/* automatically generated by rust-bindgen 0.54.1 */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 31;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __LONG_DOUBLE_USES_FLOAT128: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _SYS_TYPES_H: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __FD_ZERO_STOS: &'static [u8; 6usize] = b"stosq\0";
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _ALLOCA_H: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const _STDIO_H: u32 = 1;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &'static [u8; 5usize] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const _STRING_H: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const _STRINGS_H: u32 = 1;
pub const _BITS_SIGNUM_H: u32 = 1;
pub const _BITS_SIGNUM_GENERIC_H: u32 = 1;
pub const SIGINT: u32 = 2;
pub const SIGILL: u32 = 4;
pub const SIGABRT: u32 = 6;
pub const SIGFPE: u32 = 8;
pub const SIGSEGV: u32 = 11;
pub const SIGTERM: u32 = 15;
pub const SIGHUP: u32 = 1;
pub const SIGQUIT: u32 = 3;
pub const SIGTRAP: u32 = 5;
pub const SIGKILL: u32 = 9;
pub const SIGBUS: u32 = 10;
pub const SIGSYS: u32 = 12;
pub const SIGPIPE: u32 = 13;
pub const SIGALRM: u32 = 14;
pub const SIGURG: u32 = 16;
pub const SIGSTOP: u32 = 17;
pub const SIGTSTP: u32 = 18;
pub const SIGCONT: u32 = 19;
pub const SIGCHLD: u32 = 20;
pub const SIGTTIN: u32 = 21;
pub const SIGTTOU: u32 = 22;
pub const SIGPOLL: u32 = 23;
pub const SIGXCPU: u32 = 24;
pub const SIGXFSZ: u32 = 25;
pub const SIGVTALRM: u32 = 26;
pub const SIGPROF: u32 = 27;
pub const SIGUSR1: u32 = 30;
pub const SIGUSR2: u32 = 31;
pub const SIGWINCH: u32 = 28;
pub const SIGIO: u32 = 23;
pub const SIGIOT: u32 = 6;
pub const SIGCLD: u32 = 20;
pub const __SIGRTMIN: u32 = 32;
pub const __SIGRTMAX: u32 = 32;
pub const _NSIG: u32 = 33;
pub const SIGSTKFLT: u32 = 16;
pub const SIGPWR: u32 = 30;
pub const __sig_atomic_t_defined: u32 = 1;
pub const __siginfo_t_defined: u32 = 1;
pub const __SI_MAX_SIZE: u32 = 128;
pub const _BITS_SIGINFO_ARCH_H: u32 = 1;
pub const __SI_ERRNO_THEN_CODE: u32 = 1;
pub const __SI_HAVE_SIGSYS: u32 = 1;
pub const _BITS_SIGINFO_CONSTS_H: u32 = 1;
pub const __SI_ASYNCIO_AFTER_SIGIO: u32 = 1;
pub const __sigevent_t_defined: u32 = 1;
pub const __SIGEV_MAX_SIZE: u32 = 64;
pub const _BITS_SIGEVENT_CONSTS_H: u32 = 1;
pub const NSIG: u32 = 33;
pub const _BITS_SIGACTION_H: u32 = 1;
pub const SA_NOCLDSTOP: u32 = 1;
pub const SA_NOCLDWAIT: u32 = 2;
pub const SA_SIGINFO: u32 = 4;
pub const SA_ONSTACK: u32 = 134217728;
pub const SA_RESTART: u32 = 268435456;
pub const SA_NODEFER: u32 = 1073741824;
pub const SA_RESETHAND: u32 = 2147483648;
pub const SA_INTERRUPT: u32 = 536870912;
pub const SA_NOMASK: u32 = 1073741824;
pub const SA_ONESHOT: u32 = 2147483648;
pub const SA_STACK: u32 = 134217728;
pub const SIG_BLOCK: u32 = 0;
pub const SIG_UNBLOCK: u32 = 1;
pub const SIG_SETMASK: u32 = 2;
pub const _BITS_SIGCONTEXT_H: u32 = 1;
pub const FP_XSTATE_MAGIC1: u32 = 1179670611;
pub const FP_XSTATE_MAGIC2: u32 = 1179670597;
pub const __stack_t_defined: u32 = 1;
pub const _SYS_UCONTEXT_H: u32 = 1;
pub const __NGREG: u32 = 23;
pub const NGREG: u32 = 23;
pub const _BITS_SIGSTACK_H: u32 = 1;
pub const MINSIGSTKSZ: u32 = 2048;
pub const SIGSTKSZ: u32 = 8192;
pub const _BITS_SS_FLAGS_H: u32 = 1;
pub const __sigstack_defined: u32 = 1;
pub const _BITS_SIGTHREAD_H: u32 = 1;
pub const _ERRNO_H: u32 = 1;
pub const _BITS_ERRNO_H: u32 = 1;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const ENOTBLK: u32 = 15;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const EINVAL: u32 = 22;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const ETXTBSY: u32 = 26;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const ERANGE: u32 = 34;
pub const EDEADLK: u32 = 35;
pub const ENAMETOOLONG: u32 = 36;
pub const ENOLCK: u32 = 37;
pub const ENOSYS: u32 = 38;
pub const ENOTEMPTY: u32 = 39;
pub const ELOOP: u32 = 40;
pub const EWOULDBLOCK: u32 = 11;
pub const ENOMSG: u32 = 42;
pub const EIDRM: u32 = 43;
pub const ECHRNG: u32 = 44;
pub const EL2NSYNC: u32 = 45;
pub const EL3HLT: u32 = 46;
pub const EL3RST: u32 = 47;
pub const ELNRNG: u32 = 48;
pub const EUNATCH: u32 = 49;
pub const ENOCSI: u32 = 50;
pub const EL2HLT: u32 = 51;
pub const EBADE: u32 = 52;
pub const EBADR: u32 = 53;
pub const EXFULL: u32 = 54;
pub const ENOANO: u32 = 55;
pub const EBADRQC: u32 = 56;
pub const EBADSLT: u32 = 57;
pub const EDEADLOCK: u32 = 35;
pub const EBFONT: u32 = 59;
pub const ENOSTR: u32 = 60;
pub const ENODATA: u32 = 61;
pub const ETIME: u32 = 62;
pub const ENOSR: u32 = 63;
pub const ENONET: u32 = 64;
pub const ENOPKG: u32 = 65;
pub const EREMOTE: u32 = 66;
pub const ENOLINK: u32 = 67;
pub const EADV: u32 = 68;
pub const ESRMNT: u32 = 69;
pub const ECOMM: u32 = 70;
pub const EPROTO: u32 = 71;
pub const EMULTIHOP: u32 = 72;
pub const EDOTDOT: u32 = 73;
pub const EBADMSG: u32 = 74;
pub const EOVERFLOW: u32 = 75;
pub const ENOTUNIQ: u32 = 76;
pub const EBADFD: u32 = 77;
pub const EREMCHG: u32 = 78;
pub const ELIBACC: u32 = 79;
pub const ELIBBAD: u32 = 80;
pub const ELIBSCN: u32 = 81;
pub const ELIBMAX: u32 = 82;
pub const ELIBEXEC: u32 = 83;
pub const EILSEQ: u32 = 84;
pub const ERESTART: u32 = 85;
pub const ESTRPIPE: u32 = 86;
pub const EUSERS: u32 = 87;
pub const ENOTSOCK: u32 = 88;
pub const EDESTADDRREQ: u32 = 89;
pub const EMSGSIZE: u32 = 90;
pub const EPROTOTYPE: u32 = 91;
pub const ENOPROTOOPT: u32 = 92;
pub const EPROTONOSUPPORT: u32 = 93;
pub const ESOCKTNOSUPPORT: u32 = 94;
pub const EOPNOTSUPP: u32 = 95;
pub const EPFNOSUPPORT: u32 = 96;
pub const EAFNOSUPPORT: u32 = 97;
pub const EADDRINUSE: u32 = 98;
pub const EADDRNOTAVAIL: u32 = 99;
pub const ENETDOWN: u32 = 100;
pub const ENETUNREACH: u32 = 101;
pub const ENETRESET: u32 = 102;
pub const ECONNABORTED: u32 = 103;
pub const ECONNRESET: u32 = 104;
pub const ENOBUFS: u32 = 105;
pub const EISCONN: u32 = 106;
pub const ENOTCONN: u32 = 107;
pub const ESHUTDOWN: u32 = 108;
pub const ETOOMANYREFS: u32 = 109;
pub const ETIMEDOUT: u32 = 110;
pub const ECONNREFUSED: u32 = 111;
pub const EHOSTDOWN: u32 = 112;
pub const EHOSTUNREACH: u32 = 113;
pub const EALREADY: u32 = 114;
pub const EINPROGRESS: u32 = 115;
pub const ESTALE: u32 = 116;
pub const EUCLEAN: u32 = 117;
pub const ENOTNAM: u32 = 118;
pub const ENAVAIL: u32 = 119;
pub const EISNAM: u32 = 120;
pub const EREMOTEIO: u32 = 121;
pub const EDQUOT: u32 = 122;
pub const ENOMEDIUM: u32 = 123;
pub const EMEDIUMTYPE: u32 = 124;
pub const ECANCELED: u32 = 125;
pub const ENOKEY: u32 = 126;
pub const EKEYEXPIRED: u32 = 127;
pub const EKEYREVOKED: u32 = 128;
pub const EKEYREJECTED: u32 = 129;
pub const EOWNERDEAD: u32 = 130;
pub const ENOTRECOVERABLE: u32 = 131;
pub const ERFKILL: u32 = 132;
pub const EHWPOISON: u32 = 133;
pub const ENOTSUP: u32 = 95;
pub const _CTYPE_H: u32 = 1;
pub const _UNISTD_H: u32 = 1;
pub const _POSIX_VERSION: u32 = 200809;
pub const __POSIX2_THIS_VERSION: u32 = 200809;
pub const _POSIX2_VERSION: u32 = 200809;
pub const _POSIX2_C_VERSION: u32 = 200809;
pub const _POSIX2_C_BIND: u32 = 200809;
pub const _POSIX2_C_DEV: u32 = 200809;
pub const _POSIX2_SW_DEV: u32 = 200809;
pub const _POSIX2_LOCALEDEF: u32 = 200809;
pub const _XOPEN_VERSION: u32 = 700;
pub const _XOPEN_XCU_VERSION: u32 = 4;
pub const _XOPEN_XPG2: u32 = 1;
pub const _XOPEN_XPG3: u32 = 1;
pub const _XOPEN_XPG4: u32 = 1;
pub const _XOPEN_UNIX: u32 = 1;
pub const _XOPEN_ENH_I18N: u32 = 1;
pub const _XOPEN_LEGACY: u32 = 1;
pub const _BITS_POSIX_OPT_H: u32 = 1;
pub const _POSIX_JOB_CONTROL: u32 = 1;
pub const _POSIX_SAVED_IDS: u32 = 1;
pub const _POSIX_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_SYNCHRONIZED_IO: u32 = 200809;
pub const _POSIX_FSYNC: u32 = 200809;
pub const _POSIX_MAPPED_FILES: u32 = 200809;
pub const _POSIX_MEMLOCK: u32 = 200809;
pub const _POSIX_MEMLOCK_RANGE: u32 = 200809;
pub const _POSIX_MEMORY_PROTECTION: u32 = 200809;
pub const _POSIX_CHOWN_RESTRICTED: u32 = 0;
pub const _POSIX_VDISABLE: u8 = 0u8;
pub const _POSIX_NO_TRUNC: u32 = 1;
pub const _XOPEN_REALTIME: u32 = 1;
pub const _XOPEN_REALTIME_THREADS: u32 = 1;
pub const _XOPEN_SHM: u32 = 1;
pub const _POSIX_THREADS: u32 = 200809;
pub const _POSIX_REENTRANT_FUNCTIONS: u32 = 1;
pub const _POSIX_THREAD_SAFE_FUNCTIONS: u32 = 200809;
pub const _POSIX_THREAD_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKSIZE: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKADDR: u32 = 200809;
pub const _POSIX_THREAD_PRIO_INHERIT: u32 = 200809;
pub const _POSIX_THREAD_PRIO_PROTECT: u32 = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_INHERIT: u32 = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_PROTECT: i32 = -1;
pub const _POSIX_SEMAPHORES: u32 = 200809;
pub const _POSIX_REALTIME_SIGNALS: u32 = 200809;
pub const _POSIX_ASYNCHRONOUS_IO: u32 = 200809;
pub const _POSIX_ASYNC_IO: u32 = 1;
pub const _LFS_ASYNCHRONOUS_IO: u32 = 1;
pub const _POSIX_PRIORITIZED_IO: u32 = 200809;
pub const _LFS64_ASYNCHRONOUS_IO: u32 = 1;
pub const _LFS_LARGEFILE: u32 = 1;
pub const _LFS64_LARGEFILE: u32 = 1;
pub const _LFS64_STDIO: u32 = 1;
pub const _POSIX_SHARED_MEMORY_OBJECTS: u32 = 200809;
pub const _POSIX_CPUTIME: u32 = 0;
pub const _POSIX_THREAD_CPUTIME: u32 = 0;
pub const _POSIX_REGEXP: u32 = 1;
pub const _POSIX_READER_WRITER_LOCKS: u32 = 200809;
pub const _POSIX_SHELL: u32 = 1;
pub const _POSIX_TIMEOUTS: u32 = 200809;
pub const _POSIX_SPIN_LOCKS: u32 = 200809;
pub const _POSIX_SPAWN: u32 = 200809;
pub const _POSIX_TIMERS: u32 = 200809;
pub const _POSIX_BARRIERS: u32 = 200809;
pub const _POSIX_MESSAGE_PASSING: u32 = 200809;
pub const _POSIX_THREAD_PROCESS_SHARED: u32 = 200809;
pub const _POSIX_MONOTONIC_CLOCK: u32 = 0;
pub const _POSIX_CLOCK_SELECTION: u32 = 200809;
pub const _POSIX_ADVISORY_INFO: u32 = 200809;
pub const _POSIX_IPV6: u32 = 200809;
pub const _POSIX_RAW_SOCKETS: u32 = 200809;
pub const _POSIX2_CHAR_TERM: u32 = 200809;
pub const _POSIX_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_THREAD_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_TRACE: i32 = -1;
pub const _POSIX_TRACE_EVENT_FILTER: i32 = -1;
pub const _POSIX_TRACE_INHERIT: i32 = -1;
pub const _POSIX_TRACE_LOG: i32 = -1;
pub const _POSIX_TYPED_MEMORY_OBJECTS: i32 = -1;
pub const _POSIX_V7_LPBIG_OFFBIG: i32 = -1;
pub const _POSIX_V6_LPBIG_OFFBIG: i32 = -1;
pub const _XBS5_LPBIG_OFFBIG: i32 = -1;
pub const _POSIX_V7_LP64_OFF64: u32 = 1;
pub const _POSIX_V6_LP64_OFF64: u32 = 1;
pub const _XBS5_LP64_OFF64: u32 = 1;
pub const __ILP32_OFF32_CFLAGS: &'static [u8; 5usize] = b"-m32\0";
pub const __ILP32_OFF32_LDFLAGS: &'static [u8; 5usize] = b"-m32\0";
pub const __ILP32_OFFBIG_CFLAGS: &'static [u8; 48usize] =
    b"-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64\0";
pub const __ILP32_OFFBIG_LDFLAGS: &'static [u8; 5usize] = b"-m32\0";
pub const __LP64_OFF64_CFLAGS: &'static [u8; 5usize] = b"-m64\0";
pub const __LP64_OFF64_LDFLAGS: &'static [u8; 5usize] = b"-m64\0";
pub const STDIN_FILENO: u32 = 0;
pub const STDOUT_FILENO: u32 = 1;
pub const STDERR_FILENO: u32 = 2;
pub const R_OK: u32 = 4;
pub const W_OK: u32 = 2;
pub const X_OK: u32 = 1;
pub const F_OK: u32 = 0;
pub const L_SET: u32 = 0;
pub const L_INCR: u32 = 1;
pub const L_XTND: u32 = 2;
pub const _GETOPT_POSIX_H: u32 = 1;
pub const _GETOPT_CORE_H: u32 = 1;
pub const F_ULOCK: u32 = 0;
pub const F_LOCK: u32 = 1;
pub const F_TLOCK: u32 = 2;
pub const F_TEST: u32 = 3;
pub const _SYS_SOCKET_H: u32 = 1;
pub const __iovec_defined: u32 = 1;
pub const PF_UNSPEC: u32 = 0;
pub const PF_LOCAL: u32 = 1;
pub const PF_UNIX: u32 = 1;
pub const PF_FILE: u32 = 1;
pub const PF_INET: u32 = 2;
pub const PF_AX25: u32 = 3;
pub const PF_IPX: u32 = 4;
pub const PF_APPLETALK: u32 = 5;
pub const PF_NETROM: u32 = 6;
pub const PF_BRIDGE: u32 = 7;
pub const PF_ATMPVC: u32 = 8;
pub const PF_X25: u32 = 9;
pub const PF_INET6: u32 = 10;
pub const PF_ROSE: u32 = 11;
pub const PF_DECnet: u32 = 12;
pub const PF_NETBEUI: u32 = 13;
pub const PF_SECURITY: u32 = 14;
pub const PF_KEY: u32 = 15;
pub const PF_NETLINK: u32 = 16;
pub const PF_ROUTE: u32 = 16;
pub const PF_PACKET: u32 = 17;
pub const PF_ASH: u32 = 18;
pub const PF_ECONET: u32 = 19;
pub const PF_ATMSVC: u32 = 20;
pub const PF_RDS: u32 = 21;
pub const PF_SNA: u32 = 22;
pub const PF_IRDA: u32 = 23;
pub const PF_PPPOX: u32 = 24;
pub const PF_WANPIPE: u32 = 25;
pub const PF_LLC: u32 = 26;
pub const PF_IB: u32 = 27;
pub const PF_MPLS: u32 = 28;
pub const PF_CAN: u32 = 29;
pub const PF_TIPC: u32 = 30;
pub const PF_BLUETOOTH: u32 = 31;
pub const PF_IUCV: u32 = 32;
pub const PF_RXRPC: u32 = 33;
pub const PF_ISDN: u32 = 34;
pub const PF_PHONET: u32 = 35;
pub const PF_IEEE802154: u32 = 36;
pub const PF_CAIF: u32 = 37;
pub const PF_ALG: u32 = 38;
pub const PF_NFC: u32 = 39;
pub const PF_VSOCK: u32 = 40;
pub const PF_KCM: u32 = 41;
pub const PF_QIPCRTR: u32 = 42;
pub const PF_SMC: u32 = 43;
pub const PF_XDP: u32 = 44;
pub const PF_MAX: u32 = 45;
pub const AF_UNSPEC: u32 = 0;
pub const AF_LOCAL: u32 = 1;
pub const AF_UNIX: u32 = 1;
pub const AF_FILE: u32 = 1;
pub const AF_INET: u32 = 2;
pub const AF_AX25: u32 = 3;
pub const AF_IPX: u32 = 4;
pub const AF_APPLETALK: u32 = 5;
pub const AF_NETROM: u32 = 6;
pub const AF_BRIDGE: u32 = 7;
pub const AF_ATMPVC: u32 = 8;
pub const AF_X25: u32 = 9;
pub const AF_INET6: u32 = 10;
pub const AF_ROSE: u32 = 11;
pub const AF_DECnet: u32 = 12;
pub const AF_NETBEUI: u32 = 13;
pub const AF_SECURITY: u32 = 14;
pub const AF_KEY: u32 = 15;
pub const AF_NETLINK: u32 = 16;
pub const AF_ROUTE: u32 = 16;
pub const AF_PACKET: u32 = 17;
pub const AF_ASH: u32 = 18;
pub const AF_ECONET: u32 = 19;
pub const AF_ATMSVC: u32 = 20;
pub const AF_RDS: u32 = 21;
pub const AF_SNA: u32 = 22;
pub const AF_IRDA: u32 = 23;
pub const AF_PPPOX: u32 = 24;
pub const AF_WANPIPE: u32 = 25;
pub const AF_LLC: u32 = 26;
pub const AF_IB: u32 = 27;
pub const AF_MPLS: u32 = 28;
pub const AF_CAN: u32 = 29;
pub const AF_TIPC: u32 = 30;
pub const AF_BLUETOOTH: u32 = 31;
pub const AF_IUCV: u32 = 32;
pub const AF_RXRPC: u32 = 33;
pub const AF_ISDN: u32 = 34;
pub const AF_PHONET: u32 = 35;
pub const AF_IEEE802154: u32 = 36;
pub const AF_CAIF: u32 = 37;
pub const AF_ALG: u32 = 38;
pub const AF_NFC: u32 = 39;
pub const AF_VSOCK: u32 = 40;
pub const AF_KCM: u32 = 41;
pub const AF_QIPCRTR: u32 = 42;
pub const AF_SMC: u32 = 43;
pub const AF_XDP: u32 = 44;
pub const AF_MAX: u32 = 45;
pub const SOL_RAW: u32 = 255;
pub const SOL_DECNET: u32 = 261;
pub const SOL_X25: u32 = 262;
pub const SOL_PACKET: u32 = 263;
pub const SOL_ATM: u32 = 264;
pub const SOL_AAL: u32 = 265;
pub const SOL_IRDA: u32 = 266;
pub const SOL_NETBEUI: u32 = 267;
pub const SOL_LLC: u32 = 268;
pub const SOL_DCCP: u32 = 269;
pub const SOL_NETLINK: u32 = 270;
pub const SOL_TIPC: u32 = 271;
pub const SOL_RXRPC: u32 = 272;
pub const SOL_PPPOL2TP: u32 = 273;
pub const SOL_BLUETOOTH: u32 = 274;
pub const SOL_PNPIPE: u32 = 275;
pub const SOL_RDS: u32 = 276;
pub const SOL_IUCV: u32 = 277;
pub const SOL_CAIF: u32 = 278;
pub const SOL_ALG: u32 = 279;
pub const SOL_NFC: u32 = 280;
pub const SOL_KCM: u32 = 281;
pub const SOL_TLS: u32 = 282;
pub const SOL_XDP: u32 = 283;
pub const SOMAXCONN: u32 = 4096;
pub const _BITS_SOCKADDR_H: u32 = 1;
pub const _SS_SIZE: u32 = 128;
pub const __BITS_PER_LONG: u32 = 64;
pub const FIOSETOWN: u32 = 35073;
pub const SIOCSPGRP: u32 = 35074;
pub const FIOGETOWN: u32 = 35075;
pub const SIOCGPGRP: u32 = 35076;
pub const SIOCATMARK: u32 = 35077;
pub const SIOCGSTAMP_OLD: u32 = 35078;
pub const SIOCGSTAMPNS_OLD: u32 = 35079;
pub const SOL_SOCKET: u32 = 1;
pub const SO_DEBUG: u32 = 1;
pub const SO_REUSEADDR: u32 = 2;
pub const SO_TYPE: u32 = 3;
pub const SO_ERROR: u32 = 4;
pub const SO_DONTROUTE: u32 = 5;
pub const SO_BROADCAST: u32 = 6;
pub const SO_SNDBUF: u32 = 7;
pub const SO_RCVBUF: u32 = 8;
pub const SO_SNDBUFFORCE: u32 = 32;
pub const SO_RCVBUFFORCE: u32 = 33;
pub const SO_KEEPALIVE: u32 = 9;
pub const SO_OOBINLINE: u32 = 10;
pub const SO_NO_CHECK: u32 = 11;
pub const SO_PRIORITY: u32 = 12;
pub const SO_LINGER: u32 = 13;
pub const SO_BSDCOMPAT: u32 = 14;
pub const SO_REUSEPORT: u32 = 15;
pub const SO_PASSCRED: u32 = 16;
pub const SO_PEERCRED: u32 = 17;
pub const SO_RCVLOWAT: u32 = 18;
pub const SO_SNDLOWAT: u32 = 19;
pub const SO_RCVTIMEO_OLD: u32 = 20;
pub const SO_SNDTIMEO_OLD: u32 = 21;
pub const SO_SECURITY_AUTHENTICATION: u32 = 22;
pub const SO_SECURITY_ENCRYPTION_TRANSPORT: u32 = 23;
pub const SO_SECURITY_ENCRYPTION_NETWORK: u32 = 24;
pub const SO_BINDTODEVICE: u32 = 25;
pub const SO_ATTACH_FILTER: u32 = 26;
pub const SO_DETACH_FILTER: u32 = 27;
pub const SO_GET_FILTER: u32 = 26;
pub const SO_PEERNAME: u32 = 28;
pub const SO_ACCEPTCONN: u32 = 30;
pub const SO_PEERSEC: u32 = 31;
pub const SO_PASSSEC: u32 = 34;
pub const SO_MARK: u32 = 36;
pub const SO_PROTOCOL: u32 = 38;
pub const SO_DOMAIN: u32 = 39;
pub const SO_RXQ_OVFL: u32 = 40;
pub const SO_WIFI_STATUS: u32 = 41;
pub const SCM_WIFI_STATUS: u32 = 41;
pub const SO_PEEK_OFF: u32 = 42;
pub const SO_NOFCS: u32 = 43;
pub const SO_LOCK_FILTER: u32 = 44;
pub const SO_SELECT_ERR_QUEUE: u32 = 45;
pub const SO_BUSY_POLL: u32 = 46;
pub const SO_MAX_PACING_RATE: u32 = 47;
pub const SO_BPF_EXTENSIONS: u32 = 48;
pub const SO_INCOMING_CPU: u32 = 49;
pub const SO_ATTACH_BPF: u32 = 50;
pub const SO_DETACH_BPF: u32 = 27;
pub const SO_ATTACH_REUSEPORT_CBPF: u32 = 51;
pub const SO_ATTACH_REUSEPORT_EBPF: u32 = 52;
pub const SO_CNX_ADVICE: u32 = 53;
pub const SCM_TIMESTAMPING_OPT_STATS: u32 = 54;
pub const SO_MEMINFO: u32 = 55;
pub const SO_INCOMING_NAPI_ID: u32 = 56;
pub const SO_COOKIE: u32 = 57;
pub const SCM_TIMESTAMPING_PKTINFO: u32 = 58;
pub const SO_PEERGROUPS: u32 = 59;
pub const SO_ZEROCOPY: u32 = 60;
pub const SO_TXTIME: u32 = 61;
pub const SCM_TXTIME: u32 = 61;
pub const SO_BINDTOIFINDEX: u32 = 62;
pub const SO_TIMESTAMP_OLD: u32 = 29;
pub const SO_TIMESTAMPNS_OLD: u32 = 35;
pub const SO_TIMESTAMPING_OLD: u32 = 37;
pub const SO_TIMESTAMP_NEW: u32 = 63;
pub const SO_TIMESTAMPNS_NEW: u32 = 64;
pub const SO_TIMESTAMPING_NEW: u32 = 65;
pub const SO_RCVTIMEO_NEW: u32 = 66;
pub const SO_SNDTIMEO_NEW: u32 = 67;
pub const SO_DETACH_REUSEPORT_BPF: u32 = 68;
pub const SO_TIMESTAMP: u32 = 29;
pub const SO_TIMESTAMPNS: u32 = 35;
pub const SO_TIMESTAMPING: u32 = 37;
pub const SO_RCVTIMEO: u32 = 20;
pub const SO_SNDTIMEO: u32 = 21;
pub const SCM_TIMESTAMP: u32 = 29;
pub const SCM_TIMESTAMPNS: u32 = 35;
pub const SCM_TIMESTAMPING: u32 = 37;
pub const __osockaddr_defined: u32 = 1;
pub const _NETINET_IN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const __USE_KERNEL_IPV6_DEFS: u32 = 0;
pub const IP_OPTIONS: u32 = 4;
pub const IP_HDRINCL: u32 = 3;
pub const IP_TOS: u32 = 1;
pub const IP_TTL: u32 = 2;
pub const IP_RECVOPTS: u32 = 6;
pub const IP_RETOPTS: u32 = 7;
pub const IP_MULTICAST_IF: u32 = 32;
pub const IP_MULTICAST_TTL: u32 = 33;
pub const IP_MULTICAST_LOOP: u32 = 34;
pub const IP_ADD_MEMBERSHIP: u32 = 35;
pub const IP_DROP_MEMBERSHIP: u32 = 36;
pub const IP_UNBLOCK_SOURCE: u32 = 37;
pub const IP_BLOCK_SOURCE: u32 = 38;
pub const IP_ADD_SOURCE_MEMBERSHIP: u32 = 39;
pub const IP_DROP_SOURCE_MEMBERSHIP: u32 = 40;
pub const IP_MSFILTER: u32 = 41;
pub const MCAST_JOIN_GROUP: u32 = 42;
pub const MCAST_BLOCK_SOURCE: u32 = 43;
pub const MCAST_UNBLOCK_SOURCE: u32 = 44;
pub const MCAST_LEAVE_GROUP: u32 = 45;
pub const MCAST_JOIN_SOURCE_GROUP: u32 = 46;
pub const MCAST_LEAVE_SOURCE_GROUP: u32 = 47;
pub const MCAST_MSFILTER: u32 = 48;
pub const IP_MULTICAST_ALL: u32 = 49;
pub const IP_UNICAST_IF: u32 = 50;
pub const MCAST_EXCLUDE: u32 = 0;
pub const MCAST_INCLUDE: u32 = 1;
pub const IP_ROUTER_ALERT: u32 = 5;
pub const IP_PKTINFO: u32 = 8;
pub const IP_PKTOPTIONS: u32 = 9;
pub const IP_PMTUDISC: u32 = 10;
pub const IP_MTU_DISCOVER: u32 = 10;
pub const IP_RECVERR: u32 = 11;
pub const IP_RECVTTL: u32 = 12;
pub const IP_RECVTOS: u32 = 13;
pub const IP_MTU: u32 = 14;
pub const IP_FREEBIND: u32 = 15;
pub const IP_IPSEC_POLICY: u32 = 16;
pub const IP_XFRM_POLICY: u32 = 17;
pub const IP_PASSSEC: u32 = 18;
pub const IP_TRANSPARENT: u32 = 19;
pub const IP_ORIGDSTADDR: u32 = 20;
pub const IP_RECVORIGDSTADDR: u32 = 20;
pub const IP_MINTTL: u32 = 21;
pub const IP_NODEFRAG: u32 = 22;
pub const IP_CHECKSUM: u32 = 23;
pub const IP_BIND_ADDRESS_NO_PORT: u32 = 24;
pub const IP_RECVFRAGSIZE: u32 = 25;
pub const IP_PMTUDISC_DONT: u32 = 0;
pub const IP_PMTUDISC_WANT: u32 = 1;
pub const IP_PMTUDISC_DO: u32 = 2;
pub const IP_PMTUDISC_PROBE: u32 = 3;
pub const IP_PMTUDISC_INTERFACE: u32 = 4;
pub const IP_PMTUDISC_OMIT: u32 = 5;
pub const SOL_IP: u32 = 0;
pub const IP_DEFAULT_MULTICAST_TTL: u32 = 1;
pub const IP_DEFAULT_MULTICAST_LOOP: u32 = 1;
pub const IP_MAX_MEMBERSHIPS: u32 = 20;
pub const IPV6_ADDRFORM: u32 = 1;
pub const IPV6_2292PKTINFO: u32 = 2;
pub const IPV6_2292HOPOPTS: u32 = 3;
pub const IPV6_2292DSTOPTS: u32 = 4;
pub const IPV6_2292RTHDR: u32 = 5;
pub const IPV6_2292PKTOPTIONS: u32 = 6;
pub const IPV6_CHECKSUM: u32 = 7;
pub const IPV6_2292HOPLIMIT: u32 = 8;
pub const IPV6_NEXTHOP: u32 = 9;
pub const IPV6_AUTHHDR: u32 = 10;
pub const IPV6_UNICAST_HOPS: u32 = 16;
pub const IPV6_MULTICAST_IF: u32 = 17;
pub const IPV6_MULTICAST_HOPS: u32 = 18;
pub const IPV6_MULTICAST_LOOP: u32 = 19;
pub const IPV6_JOIN_GROUP: u32 = 20;
pub const IPV6_LEAVE_GROUP: u32 = 21;
pub const IPV6_ROUTER_ALERT: u32 = 22;
pub const IPV6_MTU_DISCOVER: u32 = 23;
pub const IPV6_MTU: u32 = 24;
pub const IPV6_RECVERR: u32 = 25;
pub const IPV6_V6ONLY: u32 = 26;
pub const IPV6_JOIN_ANYCAST: u32 = 27;
pub const IPV6_LEAVE_ANYCAST: u32 = 28;
pub const IPV6_MULTICAST_ALL: u32 = 29;
pub const IPV6_ROUTER_ALERT_ISOLATE: u32 = 30;
pub const IPV6_IPSEC_POLICY: u32 = 34;
pub const IPV6_XFRM_POLICY: u32 = 35;
pub const IPV6_HDRINCL: u32 = 36;
pub const IPV6_RECVPKTINFO: u32 = 49;
pub const IPV6_PKTINFO: u32 = 50;
pub const IPV6_RECVHOPLIMIT: u32 = 51;
pub const IPV6_HOPLIMIT: u32 = 52;
pub const IPV6_RECVHOPOPTS: u32 = 53;
pub const IPV6_HOPOPTS: u32 = 54;
pub const IPV6_RTHDRDSTOPTS: u32 = 55;
pub const IPV6_RECVRTHDR: u32 = 56;
pub const IPV6_RTHDR: u32 = 57;
pub const IPV6_RECVDSTOPTS: u32 = 58;
pub const IPV6_DSTOPTS: u32 = 59;
pub const IPV6_RECVPATHMTU: u32 = 60;
pub const IPV6_PATHMTU: u32 = 61;
pub const IPV6_DONTFRAG: u32 = 62;
pub const IPV6_RECVTCLASS: u32 = 66;
pub const IPV6_TCLASS: u32 = 67;
pub const IPV6_AUTOFLOWLABEL: u32 = 70;
pub const IPV6_ADDR_PREFERENCES: u32 = 72;
pub const IPV6_MINHOPCOUNT: u32 = 73;
pub const IPV6_ORIGDSTADDR: u32 = 74;
pub const IPV6_RECVORIGDSTADDR: u32 = 74;
pub const IPV6_TRANSPARENT: u32 = 75;
pub const IPV6_UNICAST_IF: u32 = 76;
pub const IPV6_RECVFRAGSIZE: u32 = 77;
pub const IPV6_FREEBIND: u32 = 78;
pub const IPV6_ADD_MEMBERSHIP: u32 = 20;
pub const IPV6_DROP_MEMBERSHIP: u32 = 21;
pub const IPV6_RXHOPOPTS: u32 = 54;
pub const IPV6_RXDSTOPTS: u32 = 59;
pub const IPV6_PMTUDISC_DONT: u32 = 0;
pub const IPV6_PMTUDISC_WANT: u32 = 1;
pub const IPV6_PMTUDISC_DO: u32 = 2;
pub const IPV6_PMTUDISC_PROBE: u32 = 3;
pub const IPV6_PMTUDISC_INTERFACE: u32 = 4;
pub const IPV6_PMTUDISC_OMIT: u32 = 5;
pub const SOL_IPV6: u32 = 41;
pub const SOL_ICMPV6: u32 = 58;
pub const IPV6_RTHDR_LOOSE: u32 = 0;
pub const IPV6_RTHDR_STRICT: u32 = 1;
pub const IPV6_RTHDR_TYPE_0: u32 = 0;
pub const IN_CLASSA_NET: u32 = 4278190080;
pub const IN_CLASSA_NSHIFT: u32 = 24;
pub const IN_CLASSA_HOST: u32 = 16777215;
pub const IN_CLASSA_MAX: u32 = 128;
pub const IN_CLASSB_NET: u32 = 4294901760;
pub const IN_CLASSB_NSHIFT: u32 = 16;
pub const IN_CLASSB_HOST: u32 = 65535;
pub const IN_CLASSB_MAX: u32 = 65536;
pub const IN_CLASSC_NET: u32 = 4294967040;
pub const IN_CLASSC_NSHIFT: u32 = 8;
pub const IN_CLASSC_HOST: u32 = 255;
pub const IN_LOOPBACKNET: u32 = 127;
pub const INET_ADDRSTRLEN: u32 = 16;
pub const INET6_ADDRSTRLEN: u32 = 46;
pub const _ARPA_INET_H: u32 = 1;
pub const _SYS_UIO_H: u32 = 1;
pub const _BITS_UIO_LIM_H: u32 = 1;
pub const __IOV_MAX: u32 = 1024;
pub const UIO_MAXIOV: u32 = 1024;
pub const _SYS_TIME_H: u32 = 1;
pub const _BYTESWAP_H: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const ETH_ALEN: u32 = 6;
pub const ETH_HLEN: u32 = 14;
pub const IFNAMSIZ: u32 = 16;
pub const ETH_P_ALL: u32 = 3;
pub const ETH_P_IP: u32 = 2048;
pub const ETH_P_80211_ENCAP: u32 = 35085;
pub const ETH_P_PAE: u32 = 34958;
pub const ETH_P_EAPOL: u32 = 34958;
pub const ETH_P_RSN_PREAUTH: u32 = 35015;
pub const ETH_P_RRB: u32 = 35085;
pub const ETH_P_OUI: u32 = 34999;
pub const ETH_P_8021Q: u32 = 33024;
pub const MACSTR: &'static [u8; 30usize] = b"%02x:%02x:%02x:%02x:%02x:%02x\0";
pub const COMPACT_MACSTR: &'static [u8; 25usize] =
    b"%02x%02x%02x%02x%02x%02x\0";
pub const SSID_MAX_LEN: u32 = 32;
pub const HOSTAPD_MODULE_IEEE80211: u32 = 1;
pub const HOSTAPD_MODULE_IEEE8021X: u32 = 2;
pub const HOSTAPD_MODULE_RADIUS: u32 = 4;
pub const HOSTAPD_MODULE_WPA: u32 = 8;
pub const HOSTAPD_MODULE_DRIVER: u32 = 16;
pub const HOSTAPD_MODULE_MLME: u32 = 64;
pub const RADIUS_SERVICE_TYPE_FRAMED: u32 = 2;
pub const RADIUS_TERMINATION_ACTION_DEFAULT: u32 = 0;
pub const RADIUS_TERMINATION_ACTION_RADIUS_REQUEST: u32 = 1;
pub const RADIUS_NAS_PORT_TYPE_IEEE_802_11: u32 = 19;
pub const RADIUS_ACCT_STATUS_TYPE_START: u32 = 1;
pub const RADIUS_ACCT_STATUS_TYPE_STOP: u32 = 2;
pub const RADIUS_ACCT_STATUS_TYPE_INTERIM_UPDATE: u32 = 3;
pub const RADIUS_ACCT_STATUS_TYPE_ACCOUNTING_ON: u32 = 7;
pub const RADIUS_ACCT_STATUS_TYPE_ACCOUNTING_OFF: u32 = 8;
pub const RADIUS_ACCT_AUTHENTIC_RADIUS: u32 = 1;
pub const RADIUS_ACCT_AUTHENTIC_LOCAL: u32 = 2;
pub const RADIUS_ACCT_AUTHENTIC_REMOTE: u32 = 3;
pub const RADIUS_ACCT_TERMINATE_CAUSE_USER_REQUEST: u32 = 1;
pub const RADIUS_ACCT_TERMINATE_CAUSE_LOST_CARRIER: u32 = 2;
pub const RADIUS_ACCT_TERMINATE_CAUSE_LOST_SERVICE: u32 = 3;
pub const RADIUS_ACCT_TERMINATE_CAUSE_IDLE_TIMEOUT: u32 = 4;
pub const RADIUS_ACCT_TERMINATE_CAUSE_SESSION_TIMEOUT: u32 = 5;
pub const RADIUS_ACCT_TERMINATE_CAUSE_ADMIN_RESET: u32 = 6;
pub const RADIUS_ACCT_TERMINATE_CAUSE_ADMIN_REBOOT: u32 = 7;
pub const RADIUS_ACCT_TERMINATE_CAUSE_PORT_ERROR: u32 = 8;
pub const RADIUS_ACCT_TERMINATE_CAUSE_NAS_ERROR: u32 = 9;
pub const RADIUS_ACCT_TERMINATE_CAUSE_NAS_REQUEST: u32 = 10;
pub const RADIUS_ACCT_TERMINATE_CAUSE_NAS_REBOOT: u32 = 11;
pub const RADIUS_ACCT_TERMINATE_CAUSE_PORT_UNNEEDED: u32 = 12;
pub const RADIUS_ACCT_TERMINATE_CAUSE_PORT_PREEMPTED: u32 = 13;
pub const RADIUS_ACCT_TERMINATE_CAUSE_PORT_SUSPENDED: u32 = 14;
pub const RADIUS_ACCT_TERMINATE_CAUSE_SERVICE_UNAVAILABLE: u32 = 15;
pub const RADIUS_ACCT_TERMINATE_CAUSE_CALLBACK: u32 = 16;
pub const RADIUS_ACCT_TERMINATE_CAUSE_USER_ERROR: u32 = 17;
pub const RADIUS_ACCT_TERMINATE_CAUSE_HOST_REQUEST: u32 = 18;
pub const RADIUS_TUNNEL_TAGS: u32 = 32;
pub const RADIUS_TUNNEL_TYPE_PPTP: u32 = 1;
pub const RADIUS_TUNNEL_TYPE_L2TP: u32 = 3;
pub const RADIUS_TUNNEL_TYPE_IPIP: u32 = 7;
pub const RADIUS_TUNNEL_TYPE_GRE: u32 = 10;
pub const RADIUS_TUNNEL_TYPE_VLAN: u32 = 13;
pub const RADIUS_TUNNEL_MEDIUM_TYPE_IPV4: u32 = 1;
pub const RADIUS_TUNNEL_MEDIUM_TYPE_IPV6: u32 = 2;
pub const RADIUS_TUNNEL_MEDIUM_TYPE_802: u32 = 6;
pub const RADIUS_VENDOR_ID_CISCO: u32 = 9;
pub const RADIUS_CISCO_AV_PAIR: u32 = 1;
pub const RADIUS_VENDOR_ID_MICROSOFT: u32 = 311;
pub const RADIUS_VENDOR_ID_WFA: u32 = 40808;
pub const RADIUS_DEFAULT_MSG_SIZE: u32 = 1024;
pub const RADIUS_DEFAULT_ATTR_COUNT: u32 = 16;
pub const RADIUS_802_1X_ADDR_FORMAT: &'static [u8; 30usize] =
    b"%02X-%02X-%02X-%02X-%02X-%02X\0";
pub const RADIUS_ADDR_FORMAT: &'static [u8; 25usize] =
    b"%02x%02x%02x%02x%02x%02x\0";
pub type size_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<lldiv_t>())).quot as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> size_t;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(
        __nptr: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(
        __nptr: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtod(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtold(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
extern "C" {
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type ssize_t = __ssize_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<fd_set>())).__fds_bits as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(__fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_internal_list>())).__prev
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_internal_list>())).__next
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[test]
fn bindgen_test_layout___pthread_internal_slist() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_internal_slist>())).__next
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_slist),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_mutex_s>())).__lock as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_mutex_s>())).__count as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_mutex_s>())).__owner as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_mutex_s>())).__nusers as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_mutex_s>())).__kind as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_mutex_s>())).__spins as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_mutex_s>())).__elision as *const _
                as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_mutex_s>())).__list as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__readers
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__wrphase_futex
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers_futex
                as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad3
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad4
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__cur_writer
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__shared
                as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__rwelision
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad1
                as *const _ as usize
        },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad2
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__flags
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
    pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_1 {
    pub __wseq: ::std::os::raw::c_ulonglong,
    pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            & ( * ( :: std :: ptr :: null :: < __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 > ( ) ) ) . __low as * const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            & ( * ( :: std :: ptr :: null :: < __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 > ( ) ) ) . __high as * const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq32
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq32)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_2 {
    pub __g1_start: ::std::os::raw::c_ulonglong,
    pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            & ( * ( :: std :: ptr :: null :: < __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 > ( ) ) ) . __low as * const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            & ( * ( :: std :: ptr :: null :: < __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 > ( ) ) ) . __high as * const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>()))
                .__g1_start as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>()))
                .__g1_start32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start32)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s>())).__g_refs as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s>())).__g_size as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s>())).__g1_orig_size
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s>())).__wrefs as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s>())).__g_signals as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutexattr_t>())).__size as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutexattr_t>())).__align as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_condattr_t>())).__size as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_condattr_t>())).__align as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_attr_t>())).__size as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_attr_t>())).__align as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 5usize],
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 6usize],
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_cond_t>())).__data as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_cond_t>())).__size as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_cond_t>())).__align as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t>())).__data as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t>())).__size as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t>())).__align as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__size as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__align as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_barrier_t>())).__size as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_barrier_t>())).__align as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_barrierattr_t>())).__size as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_barrierattr_t>())).__align
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn initstate(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(
        __statebuf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    assert_eq!(
        ::std::mem::size_of::<random_data>(),
        48usize,
        concat!("Size of: ", stringify!(random_data))
    );
    assert_eq!(
        ::std::mem::align_of::<random_data>(),
        8usize,
        concat!("Alignment of ", stringify!(random_data))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<random_data>())).fptr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(fptr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<random_data>())).rptr as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rptr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<random_data>())).state as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<random_data>())).rand_type as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<random_data>())).rand_deg as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_deg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<random_data>())).rand_sep as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_sep)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<random_data>())).end_ptr as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(end_ptr)
        )
    );
}
extern "C" {
    pub fn random_r(
        __buf: *mut random_data,
        __result: *mut i32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srandom_r(
        __seed: ::std::os::raw::c_uint,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate_r(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: size_t,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate_r(
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(
        __xsubi: *mut ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jrand48(
        __xsubi: *mut ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
extern "C" {
    pub fn seed48(
        __seed16v: *mut ::std::os::raw::c_ushort,
    ) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    assert_eq!(
        ::std::mem::size_of::<drand48_data>(),
        24usize,
        concat!("Size of: ", stringify!(drand48_data))
    );
    assert_eq!(
        ::std::mem::align_of::<drand48_data>(),
        8usize,
        concat!("Alignment of ", stringify!(drand48_data))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drand48_data>())).__x as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__x)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drand48_data>())).__old_x as *const _
                as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__old_x)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drand48_data>())).__c as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__c)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drand48_data>())).__init as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__init)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<drand48_data>())).__a as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__a)
        )
    );
}
extern "C" {
    pub fn drand48_r(
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand48_r(
        __seedval: ::std::os::raw::c_long,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seed48_r(
        __seed16v: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lcong48_r(
        __param: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        __nmemb: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn reallocarray(
        __ptr: *mut ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn alloca(
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(__size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: size_t,
        __size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aligned_alloc(
        __alignment: size_t,
        __size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn atexit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_quick_exit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn getenv(
        __name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(
        __string: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(
        __name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(
        __template: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(
        __template: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(
        __template: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn system(
        __command: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn realpath(
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: size_t,
        __size: size_t,
        __compar: __compar_fn_t,
    );
}
extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong)
        -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn div(
        __numer: ::std::os::raw::c_int,
        __denom: ::std::os::raw::c_int,
    ) -> div_t;
}
extern "C" {
    pub fn ldiv(
        __numer: ::std::os::raw::c_long,
        __denom: ::std::os::raw::c_long,
    ) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qecvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qfcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qgcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qecvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qfcvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(
        __s: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(
        __pwc: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(
        __s: *mut ::std::os::raw::c_char,
        __wchar: wchar_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(
        __pwcs: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn wcstombs(
        __s: *mut ::std::os::raw::c_char,
        __pwcs: *const wchar_t,
        __n: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn rpmatch(
        __response: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getloadavg(
        __loadavg: *mut f64,
        __nelem: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce1
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce2
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wch
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wchb
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wchb)
        )
    );
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__mbstate_t>())).__count as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__mbstate_t>())).__value as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_G_fpos_t>())).__pos as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_G_fpos_t>())).__state as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos64_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_G_fpos64_t>())).__pos as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_G_fpos64_t>())).__state as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: size_t,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _
                as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _
                as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _
                as usize
        },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize
        },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._codecvt as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_codecvt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._wide_data as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_wide_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._freeres_list as *const _
                as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_list)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._freeres_buf as *const _
                as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_buf)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize
        },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
pub type fpos_t = __fpos_t;
extern "C" {
    pub static mut stdin: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
extern "C" {
    pub fn remove(
        __filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(
        __s: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(
        __s: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(
        __fd: ::std::os::raw::c_int,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: size_t,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut size_t,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __size: size_t,
    );
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(
        __c: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(
        __c: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(
        __c: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(
        __c: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(
        __c: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(
        __w: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut size_t,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(
        __s: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(
        __c: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __s: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: size_t,
        __n: size_t,
        __stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(
        __stream: *mut FILE,
        __pos: *mut fpos_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(
        __stream: *mut FILE,
        __pos: *const fpos_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub static mut sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(
        __s: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(
        arg1: *mut FILE,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memccpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    assert_eq!(
        ::std::mem::size_of::<__locale_struct>(),
        232usize,
        concat!("Size of: ", stringify!(__locale_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__locale_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__locale_struct))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__locale_struct>())).__locales as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__locales)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__locale_struct>())).__ctype_b as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_b)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__locale_struct>())).__ctype_tolower
                as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_tolower)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__locale_struct>())).__ctype_toupper
                as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_toupper)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__locale_struct>())).__names as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__names)
        )
    );
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn strcoll_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __l: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm_l(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: size_t,
        __l: locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn strdup(
        __s: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        __string: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __reject: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(
        __haystack: *const ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlen(
        __s: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strnlen(
        __string: *const ::std::os::raw::c_char,
        __maxlen: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn strerror(
        __errnum: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}__xpg_strerror_r"]
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strerror_l(
        __errnum: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn bcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(
        __src: *const ::std::os::raw::c_void,
        __dest: *mut ::std::os::raw::c_void,
        __n: size_t,
    );
}
extern "C" {
    pub fn bzero(
        __s: *mut ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn index(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(__l: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(__ll: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: size_t,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn explicit_bzero(__s: *mut ::std::os::raw::c_void, __n: size_t);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strsignal(
        __sig: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
pub type sig_atomic_t = __sig_atomic_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigval {
    pub sival_int: ::std::os::raw::c_int,
    pub sival_ptr: *mut ::std::os::raw::c_void,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_sigval() {
    assert_eq!(
        ::std::mem::size_of::<sigval>(),
        8usize,
        concat!("Size of: ", stringify!(sigval))
    );
    assert_eq!(
        ::std::mem::align_of::<sigval>(),
        8usize,
        concat!("Alignment of ", stringify!(sigval))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigval>())).sival_int as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigval),
            "::",
            stringify!(sival_int)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigval>())).sival_ptr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigval),
            "::",
            stringify!(sival_ptr)
        )
    );
}
pub type __sigval_t = sigval;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t {
    pub si_signo: ::std::os::raw::c_int,
    pub si_errno: ::std::os::raw::c_int,
    pub si_code: ::std::os::raw::c_int,
    pub __pad0: ::std::os::raw::c_int,
    pub _sifields: siginfo_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union siginfo_t__bindgen_ty_1 {
    pub _pad: [::std::os::raw::c_int; 28usize],
    pub _kill: siginfo_t__bindgen_ty_1__bindgen_ty_1,
    pub _timer: siginfo_t__bindgen_ty_1__bindgen_ty_2,
    pub _rt: siginfo_t__bindgen_ty_1__bindgen_ty_3,
    pub _sigchld: siginfo_t__bindgen_ty_1__bindgen_ty_4,
    pub _sigfault: siginfo_t__bindgen_ty_1__bindgen_ty_5,
    pub _sigpoll: siginfo_t__bindgen_ty_1__bindgen_ty_6,
    pub _sigsys: siginfo_t__bindgen_ty_1__bindgen_ty_7,
    _bindgen_union_align: [u64; 14usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_1 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_1>()))
                .si_pid as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(si_pid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_1>()))
                .si_uid as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(si_uid)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_2 {
    pub si_tid: ::std::os::raw::c_int,
    pub si_overrun: ::std::os::raw::c_int,
    pub si_sigval: __sigval_t,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_2>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_2>()))
                .si_tid as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(si_tid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_2>()))
                .si_overrun as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(si_overrun)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_2>()))
                .si_sigval as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(si_sigval)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_3 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
    pub si_sigval: __sigval_t,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_3>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_3>()))
                .si_pid as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(si_pid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_3>()))
                .si_uid as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(si_uid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_3>()))
                .si_sigval as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(si_sigval)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_4 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
    pub si_status: ::std::os::raw::c_int,
    pub si_utime: __clock_t,
    pub si_stime: __clock_t,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_4() {
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_4>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_4>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_4>()))
                .si_pid as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(si_pid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_4>()))
                .si_uid as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(si_uid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_4>()))
                .si_status as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(si_status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_4>()))
                .si_utime as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(si_utime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_4>()))
                .si_stime as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_4),
            "::",
            stringify!(si_stime)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_5 {
    pub si_addr: *mut ::std::os::raw::c_void,
    pub si_addr_lsb: ::std::os::raw::c_short,
    pub _bounds: siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 {
    pub _addr_bnd:
        siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
    pub _pkey: __uint32_t,
    _bindgen_union_align: [u64; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1 {
    pub _lower: *mut ::std::os::raw::c_void,
    pub _upper: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1(
) {
    assert_eq ! ( :: std :: mem :: size_of :: < siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1 > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1 ) ) );
    assert_eq ! ( :: std :: mem :: align_of :: < siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1 ) ) );
    assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1 > ( ) ) ) . _lower as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1 ) , "::" , stringify ! ( _lower ) ) );
    assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1 > ( ) ) ) . _upper as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1 ) , "::" , stringify ! ( _upper ) ) );
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<
            siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1,
        >(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<
            siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1,
        >(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<
                siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1,
            >()))
            ._addr_bnd as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1),
            "::",
            stringify!(_addr_bnd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<
                siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1,
            >()))
            ._pkey as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1),
            "::",
            stringify!(_pkey)
        )
    );
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_5() {
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_5>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_5>()))
                .si_addr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(si_addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_5>()))
                .si_addr_lsb as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(si_addr_lsb)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_5>()))
                ._bounds as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_5),
            "::",
            stringify!(_bounds)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_6 {
    pub si_band: ::std::os::raw::c_long,
    pub si_fd: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_6() {
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_6>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_6)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_6>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_6>()))
                .si_band as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(si_band)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_6>()))
                .si_fd as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_6),
            "::",
            stringify!(si_fd)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_7 {
    pub _call_addr: *mut ::std::os::raw::c_void,
    pub _syscall: ::std::os::raw::c_int,
    pub _arch: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1__bindgen_ty_7() {
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1__bindgen_ty_7>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_7)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1__bindgen_ty_7>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_7>()))
                ._call_addr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(_call_addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_7>()))
                ._syscall as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(_syscall)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1__bindgen_ty_7>()))
                ._arch as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1__bindgen_ty_7),
            "::",
            stringify!(_arch)
        )
    );
}
#[test]
fn bindgen_test_layout_siginfo_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<siginfo_t__bindgen_ty_1>(),
        112usize,
        concat!("Size of: ", stringify!(siginfo_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(siginfo_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1>()))._pad as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_pad)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1>()))._kill
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_kill)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1>()))._timer
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_timer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1>()))._rt as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_rt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1>()))._sigchld
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_sigchld)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1>()))._sigfault
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_sigfault)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1>()))._sigpoll
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_sigpoll)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t__bindgen_ty_1>()))._sigsys
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t__bindgen_ty_1),
            "::",
            stringify!(_sigsys)
        )
    );
}
#[test]
fn bindgen_test_layout_siginfo_t() {
    assert_eq!(
        ::std::mem::size_of::<siginfo_t>(),
        128usize,
        concat!("Size of: ", stringify!(siginfo_t))
    );
    assert_eq!(
        ::std::mem::align_of::<siginfo_t>(),
        8usize,
        concat!("Alignment of ", stringify!(siginfo_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t>())).si_signo as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t),
            "::",
            stringify!(si_signo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t>())).si_errno as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t),
            "::",
            stringify!(si_errno)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t>())).si_code as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t),
            "::",
            stringify!(si_code)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t>())).__pad0 as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t),
            "::",
            stringify!(__pad0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<siginfo_t>()))._sifields as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(siginfo_t),
            "::",
            stringify!(_sifields)
        )
    );
}
pub const SI_ASYNCNL: _bindgen_ty_1 = -60;
pub const SI_DETHREAD: _bindgen_ty_1 = -7;
pub const SI_TKILL: _bindgen_ty_1 = -6;
pub const SI_SIGIO: _bindgen_ty_1 = -5;
pub const SI_ASYNCIO: _bindgen_ty_1 = -4;
pub const SI_MESGQ: _bindgen_ty_1 = -3;
pub const SI_TIMER: _bindgen_ty_1 = -2;
pub const SI_QUEUE: _bindgen_ty_1 = -1;
pub const SI_USER: _bindgen_ty_1 = 0;
pub const SI_KERNEL: _bindgen_ty_1 = 128;
pub type _bindgen_ty_1 = i32;
pub const ILL_ILLOPC: _bindgen_ty_2 = 1;
pub const ILL_ILLOPN: _bindgen_ty_2 = 2;
pub const ILL_ILLADR: _bindgen_ty_2 = 3;
pub const ILL_ILLTRP: _bindgen_ty_2 = 4;
pub const ILL_PRVOPC: _bindgen_ty_2 = 5;
pub const ILL_PRVREG: _bindgen_ty_2 = 6;
pub const ILL_COPROC: _bindgen_ty_2 = 7;
pub const ILL_BADSTK: _bindgen_ty_2 = 8;
pub const ILL_BADIADDR: _bindgen_ty_2 = 9;
pub type _bindgen_ty_2 = u32;
pub const FPE_INTDIV: _bindgen_ty_3 = 1;
pub const FPE_INTOVF: _bindgen_ty_3 = 2;
pub const FPE_FLTDIV: _bindgen_ty_3 = 3;
pub const FPE_FLTOVF: _bindgen_ty_3 = 4;
pub const FPE_FLTUND: _bindgen_ty_3 = 5;
pub const FPE_FLTRES: _bindgen_ty_3 = 6;
pub const FPE_FLTINV: _bindgen_ty_3 = 7;
pub const FPE_FLTSUB: _bindgen_ty_3 = 8;
pub const FPE_FLTUNK: _bindgen_ty_3 = 14;
pub const FPE_CONDTRAP: _bindgen_ty_3 = 15;
pub type _bindgen_ty_3 = u32;
pub const SEGV_MAPERR: _bindgen_ty_4 = 1;
pub const SEGV_ACCERR: _bindgen_ty_4 = 2;
pub const SEGV_BNDERR: _bindgen_ty_4 = 3;
pub const SEGV_PKUERR: _bindgen_ty_4 = 4;
pub const SEGV_ACCADI: _bindgen_ty_4 = 5;
pub const SEGV_ADIDERR: _bindgen_ty_4 = 6;
pub const SEGV_ADIPERR: _bindgen_ty_4 = 7;
pub type _bindgen_ty_4 = u32;
pub const BUS_ADRALN: _bindgen_ty_5 = 1;
pub const BUS_ADRERR: _bindgen_ty_5 = 2;
pub const BUS_OBJERR: _bindgen_ty_5 = 3;
pub const BUS_MCEERR_AR: _bindgen_ty_5 = 4;
pub const BUS_MCEERR_AO: _bindgen_ty_5 = 5;
pub type _bindgen_ty_5 = u32;
pub const CLD_EXITED: _bindgen_ty_6 = 1;
pub const CLD_KILLED: _bindgen_ty_6 = 2;
pub const CLD_DUMPED: _bindgen_ty_6 = 3;
pub const CLD_TRAPPED: _bindgen_ty_6 = 4;
pub const CLD_STOPPED: _bindgen_ty_6 = 5;
pub const CLD_CONTINUED: _bindgen_ty_6 = 6;
pub type _bindgen_ty_6 = u32;
pub const POLL_IN: _bindgen_ty_7 = 1;
pub const POLL_OUT: _bindgen_ty_7 = 2;
pub const POLL_MSG: _bindgen_ty_7 = 3;
pub const POLL_ERR: _bindgen_ty_7 = 4;
pub const POLL_PRI: _bindgen_ty_7 = 5;
pub const POLL_HUP: _bindgen_ty_7 = 6;
pub type _bindgen_ty_7 = u32;
pub type sigval_t = __sigval_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigevent {
    pub sigev_value: __sigval_t,
    pub sigev_signo: ::std::os::raw::c_int,
    pub sigev_notify: ::std::os::raw::c_int,
    pub _sigev_un: sigevent__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigevent__bindgen_ty_1 {
    pub _pad: [::std::os::raw::c_int; 12usize],
    pub _tid: __pid_t,
    pub _sigev_thread: sigevent__bindgen_ty_1__bindgen_ty_1,
    _bindgen_union_align: [u64; 6usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigevent__bindgen_ty_1__bindgen_ty_1 {
    pub _function:
        ::std::option::Option<unsafe extern "C" fn(arg1: __sigval_t)>,
    pub _attribute: *mut pthread_attr_t,
}
#[test]
fn bindgen_test_layout_sigevent__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<sigevent__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(sigevent__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<sigevent__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(sigevent__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigevent__bindgen_ty_1__bindgen_ty_1>()))
                ._function as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_function)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigevent__bindgen_ty_1__bindgen_ty_1>()))
                ._attribute as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(_attribute)
        )
    );
}
#[test]
fn bindgen_test_layout_sigevent__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<sigevent__bindgen_ty_1>(),
        48usize,
        concat!("Size of: ", stringify!(sigevent__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<sigevent__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(sigevent__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigevent__bindgen_ty_1>()))._pad as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent__bindgen_ty_1),
            "::",
            stringify!(_pad)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigevent__bindgen_ty_1>()))._tid as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent__bindgen_ty_1),
            "::",
            stringify!(_tid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigevent__bindgen_ty_1>()))._sigev_thread
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent__bindgen_ty_1),
            "::",
            stringify!(_sigev_thread)
        )
    );
}
#[test]
fn bindgen_test_layout_sigevent() {
    assert_eq!(
        ::std::mem::size_of::<sigevent>(),
        64usize,
        concat!("Size of: ", stringify!(sigevent))
    );
    assert_eq!(
        ::std::mem::align_of::<sigevent>(),
        8usize,
        concat!("Alignment of ", stringify!(sigevent))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigevent>())).sigev_value as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_value)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigevent>())).sigev_signo as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_signo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigevent>())).sigev_notify as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_notify)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigevent>()))._sigev_un as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(_sigev_un)
        )
    );
}
pub type sigevent_t = sigevent;
pub const SIGEV_SIGNAL: _bindgen_ty_8 = 0;
pub const SIGEV_NONE: _bindgen_ty_8 = 1;
pub const SIGEV_THREAD: _bindgen_ty_8 = 2;
pub const SIGEV_THREAD_ID: _bindgen_ty_8 = 4;
pub type _bindgen_ty_8 = u32;
pub type __sighandler_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
extern "C" {
    pub fn __sysv_signal(
        __sig: ::std::os::raw::c_int,
        __handler: __sighandler_t,
    ) -> __sighandler_t;
}
extern "C" {
    pub fn signal(
        __sig: ::std::os::raw::c_int,
        __handler: __sighandler_t,
    ) -> __sighandler_t;
}
extern "C" {
    pub fn kill(
        __pid: __pid_t,
        __sig: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn killpg(
        __pgrp: __pid_t,
        __sig: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn raise(__sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ssignal(
        __sig: ::std::os::raw::c_int,
        __handler: __sighandler_t,
    ) -> __sighandler_t;
}
extern "C" {
    pub fn gsignal(__sig: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn psignal(
        __sig: ::std::os::raw::c_int,
        __s: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn psiginfo(
        __pinfo: *const siginfo_t,
        __s: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn sigblock(__mask: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigsetmask(__mask: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn siggetmask() -> ::std::os::raw::c_int;
}
pub type sig_t = __sighandler_t;
extern "C" {
    pub fn sigemptyset(__set: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigfillset(__set: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigaddset(
        __set: *mut sigset_t,
        __signo: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigdelset(
        __set: *mut sigset_t,
        __signo: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigismember(
        __set: *const sigset_t,
        __signo: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigaction {
    pub __sigaction_handler: sigaction__bindgen_ty_1,
    pub sa_mask: __sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
    pub sa_restorer: ::std::option::Option<unsafe extern "C" fn()>,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigaction__bindgen_ty_1 {
    pub sa_handler: __sighandler_t,
    pub sa_sigaction: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut siginfo_t,
            arg3: *mut ::std::os::raw::c_void,
        ),
    >,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_sigaction__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<sigaction__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(sigaction__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<sigaction__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(sigaction__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigaction__bindgen_ty_1>())).sa_handler
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction__bindgen_ty_1),
            "::",
            stringify!(sa_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigaction__bindgen_ty_1>())).sa_sigaction
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction__bindgen_ty_1),
            "::",
            stringify!(sa_sigaction)
        )
    );
}
#[test]
fn bindgen_test_layout_sigaction() {
    assert_eq!(
        ::std::mem::size_of::<sigaction>(),
        152usize,
        concat!("Size of: ", stringify!(sigaction))
    );
    assert_eq!(
        ::std::mem::align_of::<sigaction>(),
        8usize,
        concat!("Alignment of ", stringify!(sigaction))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigaction>())).__sigaction_handler
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(__sigaction_handler)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigaction>())).sa_mask as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(sa_mask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigaction>())).sa_flags as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(sa_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigaction>())).sa_restorer as *const _
                as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(sa_restorer)
        )
    );
}
extern "C" {
    pub fn sigprocmask(
        __how: ::std::os::raw::c_int,
        __set: *const sigset_t,
        __oset: *mut sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigsuspend(__set: *const sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigaction(
        __sig: ::std::os::raw::c_int,
        __act: *const sigaction,
        __oact: *mut sigaction,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigpending(__set: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigwait(
        __set: *const sigset_t,
        __sig: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigwaitinfo(
        __set: *const sigset_t,
        __info: *mut siginfo_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigtimedwait(
        __set: *const sigset_t,
        __info: *mut siginfo_t,
        __timeout: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigqueue(
        __pid: __pid_t,
        __sig: ::std::os::raw::c_int,
        __val: sigval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static _sys_siglist: [*const ::std::os::raw::c_char; 65usize];
}
extern "C" {
    pub static sys_siglist: [*const ::std::os::raw::c_char; 65usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _fpx_sw_bytes {
    pub magic1: __uint32_t,
    pub extended_size: __uint32_t,
    pub xstate_bv: __uint64_t,
    pub xstate_size: __uint32_t,
    pub __glibc_reserved1: [__uint32_t; 7usize],
}
#[test]
fn bindgen_test_layout__fpx_sw_bytes() {
    assert_eq!(
        ::std::mem::size_of::<_fpx_sw_bytes>(),
        48usize,
        concat!("Size of: ", stringify!(_fpx_sw_bytes))
    );
    assert_eq!(
        ::std::mem::align_of::<_fpx_sw_bytes>(),
        8usize,
        concat!("Alignment of ", stringify!(_fpx_sw_bytes))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_fpx_sw_bytes>())).magic1 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpx_sw_bytes),
            "::",
            stringify!(magic1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_fpx_sw_bytes>())).extended_size as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpx_sw_bytes),
            "::",
            stringify!(extended_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_fpx_sw_bytes>())).xstate_bv as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpx_sw_bytes),
            "::",
            stringify!(xstate_bv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_fpx_sw_bytes>())).xstate_size as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpx_sw_bytes),
            "::",
            stringify!(xstate_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_fpx_sw_bytes>())).__glibc_reserved1
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpx_sw_bytes),
            "::",
            stringify!(__glibc_reserved1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _fpreg {
    pub significand: [::std::os::raw::c_ushort; 4usize],
    pub exponent: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__fpreg() {
    assert_eq!(
        ::std::mem::size_of::<_fpreg>(),
        10usize,
        concat!("Size of: ", stringify!(_fpreg))
    );
    assert_eq!(
        ::std::mem::align_of::<_fpreg>(),
        2usize,
        concat!("Alignment of ", stringify!(_fpreg))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_fpreg>())).significand as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpreg),
            "::",
            stringify!(significand)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_fpreg>())).exponent as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpreg),
            "::",
            stringify!(exponent)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _fpxreg {
    pub significand: [::std::os::raw::c_ushort; 4usize],
    pub exponent: ::std::os::raw::c_ushort,
    pub __glibc_reserved1: [::std::os::raw::c_ushort; 3usize],
}
#[test]
fn bindgen_test_layout__fpxreg() {
    assert_eq!(
        ::std::mem::size_of::<_fpxreg>(),
        16usize,
        concat!("Size of: ", stringify!(_fpxreg))
    );
    assert_eq!(
        ::std::mem::align_of::<_fpxreg>(),
        2usize,
        concat!("Alignment of ", stringify!(_fpxreg))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_fpxreg>())).significand as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpxreg),
            "::",
            stringify!(significand)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_fpxreg>())).exponent as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpxreg),
            "::",
            stringify!(exponent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_fpxreg>())).__glibc_reserved1 as *const _
                as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpxreg),
            "::",
            stringify!(__glibc_reserved1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmmreg {
    pub element: [__uint32_t; 4usize],
}
#[test]
fn bindgen_test_layout__xmmreg() {
    assert_eq!(
        ::std::mem::size_of::<_xmmreg>(),
        16usize,
        concat!("Size of: ", stringify!(_xmmreg))
    );
    assert_eq!(
        ::std::mem::align_of::<_xmmreg>(),
        4usize,
        concat!("Alignment of ", stringify!(_xmmreg))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xmmreg>())).element as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xmmreg),
            "::",
            stringify!(element)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _fpstate {
    pub cwd: __uint16_t,
    pub swd: __uint16_t,
    pub ftw: __uint16_t,
    pub fop: __uint16_t,
    pub rip: __uint64_t,
    pub rdp: __uint64_t,
    pub mxcsr: __uint32_t,
    pub mxcr_mask: __uint32_t,
    pub _st: [_fpxreg; 8usize],
    pub _xmm: [_xmmreg; 16usize],
    pub __glibc_reserved1: [__uint32_t; 24usize],
}
#[test]
fn bindgen_test_layout__fpstate() {
    assert_eq!(
        ::std::mem::size_of::<_fpstate>(),
        512usize,
        concat!("Size of: ", stringify!(_fpstate))
    );
    assert_eq!(
        ::std::mem::align_of::<_fpstate>(),
        8usize,
        concat!("Alignment of ", stringify!(_fpstate))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_fpstate>())).cwd as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(cwd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_fpstate>())).swd as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(swd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_fpstate>())).ftw as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(ftw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_fpstate>())).fop as *const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(fop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_fpstate>())).rip as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(rip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_fpstate>())).rdp as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(rdp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_fpstate>())).mxcsr as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(mxcsr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_fpstate>())).mxcr_mask as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(mxcr_mask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_fpstate>()))._st as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(_st)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_fpstate>()))._xmm as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(_xmm)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_fpstate>())).__glibc_reserved1 as *const _
                as usize
        },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(_fpstate),
            "::",
            stringify!(__glibc_reserved1)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigcontext {
    pub r8: __uint64_t,
    pub r9: __uint64_t,
    pub r10: __uint64_t,
    pub r11: __uint64_t,
    pub r12: __uint64_t,
    pub r13: __uint64_t,
    pub r14: __uint64_t,
    pub r15: __uint64_t,
    pub rdi: __uint64_t,
    pub rsi: __uint64_t,
    pub rbp: __uint64_t,
    pub rbx: __uint64_t,
    pub rdx: __uint64_t,
    pub rax: __uint64_t,
    pub rcx: __uint64_t,
    pub rsp: __uint64_t,
    pub rip: __uint64_t,
    pub eflags: __uint64_t,
    pub cs: ::std::os::raw::c_ushort,
    pub gs: ::std::os::raw::c_ushort,
    pub fs: ::std::os::raw::c_ushort,
    pub __pad0: ::std::os::raw::c_ushort,
    pub err: __uint64_t,
    pub trapno: __uint64_t,
    pub oldmask: __uint64_t,
    pub cr2: __uint64_t,
    pub __bindgen_anon_1: sigcontext__bindgen_ty_1,
    pub __reserved1: [__uint64_t; 8usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigcontext__bindgen_ty_1 {
    pub fpstate: *mut _fpstate,
    pub __fpstate_word: __uint64_t,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_sigcontext__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<sigcontext__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(sigcontext__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<sigcontext__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(sigcontext__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigcontext__bindgen_ty_1>())).fpstate
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext__bindgen_ty_1),
            "::",
            stringify!(fpstate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigcontext__bindgen_ty_1>())).__fpstate_word
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext__bindgen_ty_1),
            "::",
            stringify!(__fpstate_word)
        )
    );
}
#[test]
fn bindgen_test_layout_sigcontext() {
    assert_eq!(
        ::std::mem::size_of::<sigcontext>(),
        256usize,
        concat!("Size of: ", stringify!(sigcontext))
    );
    assert_eq!(
        ::std::mem::align_of::<sigcontext>(),
        8usize,
        concat!("Alignment of ", stringify!(sigcontext))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigcontext>())).r8 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(r8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigcontext>())).r9 as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(r9)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigcontext>())).r10 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(r10)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigcontext>())).r11 as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(r11)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigcontext>())).r12 as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(r12)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigcontext>())).r13 as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(r13)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigcontext>())).r14 as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(r14)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigcontext>())).r15 as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(r15)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigcontext>())).rdi as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(rdi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigcontext>())).rsi as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(rsi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigcontext>())).rbp as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(rbp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigcontext>())).rbx as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(rbx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigcontext>())).rdx as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(rdx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigcontext>())).rax as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(rax)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigcontext>())).rcx as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(rcx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigcontext>())).rsp as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(rsp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigcontext>())).rip as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(rip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigcontext>())).eflags as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(eflags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigcontext>())).cs as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(cs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigcontext>())).gs as *const _ as usize
        },
        146usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(gs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigcontext>())).fs as *const _ as usize
        },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(fs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigcontext>())).__pad0 as *const _ as usize
        },
        150usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(__pad0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigcontext>())).err as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(err)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigcontext>())).trapno as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(trapno)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigcontext>())).oldmask as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(oldmask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigcontext>())).cr2 as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(cr2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigcontext>())).__reserved1 as *const _
                as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(sigcontext),
            "::",
            stringify!(__reserved1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xsave_hdr {
    pub xstate_bv: __uint64_t,
    pub __glibc_reserved1: [__uint64_t; 2usize],
    pub __glibc_reserved2: [__uint64_t; 5usize],
}
#[test]
fn bindgen_test_layout__xsave_hdr() {
    assert_eq!(
        ::std::mem::size_of::<_xsave_hdr>(),
        64usize,
        concat!("Size of: ", stringify!(_xsave_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<_xsave_hdr>(),
        8usize,
        concat!("Alignment of ", stringify!(_xsave_hdr))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xsave_hdr>())).xstate_bv as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xsave_hdr),
            "::",
            stringify!(xstate_bv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xsave_hdr>())).__glibc_reserved1 as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_xsave_hdr),
            "::",
            stringify!(__glibc_reserved1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xsave_hdr>())).__glibc_reserved2 as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_xsave_hdr),
            "::",
            stringify!(__glibc_reserved2)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _ymmh_state {
    pub ymmh_space: [__uint32_t; 64usize],
}
#[test]
fn bindgen_test_layout__ymmh_state() {
    assert_eq!(
        ::std::mem::size_of::<_ymmh_state>(),
        256usize,
        concat!("Size of: ", stringify!(_ymmh_state))
    );
    assert_eq!(
        ::std::mem::align_of::<_ymmh_state>(),
        4usize,
        concat!("Alignment of ", stringify!(_ymmh_state))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_ymmh_state>())).ymmh_space as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ymmh_state),
            "::",
            stringify!(ymmh_space)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _xstate {
    pub fpstate: _fpstate,
    pub xstate_hdr: _xsave_hdr,
    pub ymmh: _ymmh_state,
}
#[test]
fn bindgen_test_layout__xstate() {
    assert_eq!(
        ::std::mem::size_of::<_xstate>(),
        832usize,
        concat!("Size of: ", stringify!(_xstate))
    );
    assert_eq!(
        ::std::mem::align_of::<_xstate>(),
        8usize,
        concat!("Alignment of ", stringify!(_xstate))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xstate>())).fpstate as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_xstate),
            "::",
            stringify!(fpstate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xstate>())).xstate_hdr as *const _ as usize
        },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(_xstate),
            "::",
            stringify!(xstate_hdr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_xstate>())).ymmh as *const _ as usize
        },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(_xstate),
            "::",
            stringify!(ymmh)
        )
    );
}
extern "C" {
    pub fn sigreturn(__scp: *mut sigcontext) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_t {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_flags: ::std::os::raw::c_int,
    pub ss_size: size_t,
}
#[test]
fn bindgen_test_layout_stack_t() {
    assert_eq!(
        ::std::mem::size_of::<stack_t>(),
        24usize,
        concat!("Size of: ", stringify!(stack_t))
    );
    assert_eq!(
        ::std::mem::align_of::<stack_t>(),
        8usize,
        concat!("Alignment of ", stringify!(stack_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<stack_t>())).ss_sp as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stack_t),
            "::",
            stringify!(ss_sp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<stack_t>())).ss_flags as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stack_t),
            "::",
            stringify!(ss_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<stack_t>())).ss_size as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(stack_t),
            "::",
            stringify!(ss_size)
        )
    );
}
pub type greg_t = ::std::os::raw::c_longlong;
pub type gregset_t = [greg_t; 23usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _libc_fpxreg {
    pub significand: [::std::os::raw::c_ushort; 4usize],
    pub exponent: ::std::os::raw::c_ushort,
    pub __glibc_reserved1: [::std::os::raw::c_ushort; 3usize],
}
#[test]
fn bindgen_test_layout__libc_fpxreg() {
    assert_eq!(
        ::std::mem::size_of::<_libc_fpxreg>(),
        16usize,
        concat!("Size of: ", stringify!(_libc_fpxreg))
    );
    assert_eq!(
        ::std::mem::align_of::<_libc_fpxreg>(),
        2usize,
        concat!("Alignment of ", stringify!(_libc_fpxreg))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_libc_fpxreg>())).significand as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpxreg),
            "::",
            stringify!(significand)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_libc_fpxreg>())).exponent as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpxreg),
            "::",
            stringify!(exponent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_libc_fpxreg>())).__glibc_reserved1
                as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpxreg),
            "::",
            stringify!(__glibc_reserved1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _libc_xmmreg {
    pub element: [__uint32_t; 4usize],
}
#[test]
fn bindgen_test_layout__libc_xmmreg() {
    assert_eq!(
        ::std::mem::size_of::<_libc_xmmreg>(),
        16usize,
        concat!("Size of: ", stringify!(_libc_xmmreg))
    );
    assert_eq!(
        ::std::mem::align_of::<_libc_xmmreg>(),
        4usize,
        concat!("Alignment of ", stringify!(_libc_xmmreg))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_libc_xmmreg>())).element as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_xmmreg),
            "::",
            stringify!(element)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _libc_fpstate {
    pub cwd: __uint16_t,
    pub swd: __uint16_t,
    pub ftw: __uint16_t,
    pub fop: __uint16_t,
    pub rip: __uint64_t,
    pub rdp: __uint64_t,
    pub mxcsr: __uint32_t,
    pub mxcr_mask: __uint32_t,
    pub _st: [_libc_fpxreg; 8usize],
    pub _xmm: [_libc_xmmreg; 16usize],
    pub __glibc_reserved1: [__uint32_t; 24usize],
}
#[test]
fn bindgen_test_layout__libc_fpstate() {
    assert_eq!(
        ::std::mem::size_of::<_libc_fpstate>(),
        512usize,
        concat!("Size of: ", stringify!(_libc_fpstate))
    );
    assert_eq!(
        ::std::mem::align_of::<_libc_fpstate>(),
        8usize,
        concat!("Alignment of ", stringify!(_libc_fpstate))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_libc_fpstate>())).cwd as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(cwd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_libc_fpstate>())).swd as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(swd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_libc_fpstate>())).ftw as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(ftw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_libc_fpstate>())).fop as *const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(fop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_libc_fpstate>())).rip as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(rip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_libc_fpstate>())).rdp as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(rdp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_libc_fpstate>())).mxcsr as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(mxcsr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_libc_fpstate>())).mxcr_mask as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(mxcr_mask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_libc_fpstate>()))._st as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(_st)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_libc_fpstate>()))._xmm as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(_xmm)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_libc_fpstate>())).__glibc_reserved1
                as *const _ as usize
        },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(_libc_fpstate),
            "::",
            stringify!(__glibc_reserved1)
        )
    );
}
pub type fpregset_t = *mut _libc_fpstate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mcontext_t {
    pub gregs: gregset_t,
    pub fpregs: fpregset_t,
    pub __reserved1: [::std::os::raw::c_ulonglong; 8usize],
}
#[test]
fn bindgen_test_layout_mcontext_t() {
    assert_eq!(
        ::std::mem::size_of::<mcontext_t>(),
        256usize,
        concat!("Size of: ", stringify!(mcontext_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mcontext_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mcontext_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mcontext_t>())).gregs as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mcontext_t),
            "::",
            stringify!(gregs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mcontext_t>())).fpregs as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(mcontext_t),
            "::",
            stringify!(fpregs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<mcontext_t>())).__reserved1 as *const _
                as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(mcontext_t),
            "::",
            stringify!(__reserved1)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ucontext_t {
    pub uc_flags: ::std::os::raw::c_ulong,
    pub uc_link: *mut ucontext_t,
    pub uc_stack: stack_t,
    pub uc_mcontext: mcontext_t,
    pub uc_sigmask: sigset_t,
    pub __fpregs_mem: _libc_fpstate,
    pub __ssp: [::std::os::raw::c_ulonglong; 4usize],
}
#[test]
fn bindgen_test_layout_ucontext_t() {
    assert_eq!(
        ::std::mem::size_of::<ucontext_t>(),
        968usize,
        concat!("Size of: ", stringify!(ucontext_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ucontext_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ucontext_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ucontext_t>())).uc_flags as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ucontext_t),
            "::",
            stringify!(uc_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ucontext_t>())).uc_link as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ucontext_t),
            "::",
            stringify!(uc_link)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ucontext_t>())).uc_stack as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ucontext_t),
            "::",
            stringify!(uc_stack)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ucontext_t>())).uc_mcontext as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ucontext_t),
            "::",
            stringify!(uc_mcontext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ucontext_t>())).uc_sigmask as *const _
                as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(ucontext_t),
            "::",
            stringify!(uc_sigmask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ucontext_t>())).__fpregs_mem as *const _
                as usize
        },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(ucontext_t),
            "::",
            stringify!(__fpregs_mem)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ucontext_t>())).__ssp as *const _ as usize
        },
        936usize,
        concat!(
            "Offset of field: ",
            stringify!(ucontext_t),
            "::",
            stringify!(__ssp)
        )
    );
}
extern "C" {
    pub fn siginterrupt(
        __sig: ::std::os::raw::c_int,
        __interrupt: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub const SS_ONSTACK: _bindgen_ty_9 = 1;
pub const SS_DISABLE: _bindgen_ty_9 = 2;
pub type _bindgen_ty_9 = u32;
extern "C" {
    pub fn sigaltstack(
        __ss: *const stack_t,
        __oss: *mut stack_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_onstack: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sigstack() {
    assert_eq!(
        ::std::mem::size_of::<sigstack>(),
        16usize,
        concat!("Size of: ", stringify!(sigstack))
    );
    assert_eq!(
        ::std::mem::align_of::<sigstack>(),
        8usize,
        concat!("Alignment of ", stringify!(sigstack))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigstack>())).ss_sp as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigstack),
            "::",
            stringify!(ss_sp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigstack>())).ss_onstack as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigstack),
            "::",
            stringify!(ss_onstack)
        )
    );
}
extern "C" {
    pub fn sigstack(
        __ss: *mut sigstack,
        __oss: *mut sigstack,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_sigmask(
        __how: ::std::os::raw::c_int,
        __newmask: *const __sigset_t,
        __oldmask: *mut __sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_kill(
        __threadid: pthread_t,
        __signo: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __libc_current_sigrtmin() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __libc_current_sigrtmax() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __errno_location() -> *mut ::std::os::raw::c_int;
}
pub const _ISupper: _bindgen_ty_10 = 256;
pub const _ISlower: _bindgen_ty_10 = 512;
pub const _ISalpha: _bindgen_ty_10 = 1024;
pub const _ISdigit: _bindgen_ty_10 = 2048;
pub const _ISxdigit: _bindgen_ty_10 = 4096;
pub const _ISspace: _bindgen_ty_10 = 8192;
pub const _ISprint: _bindgen_ty_10 = 16384;
pub const _ISgraph: _bindgen_ty_10 = 32768;
pub const _ISblank: _bindgen_ty_10 = 1;
pub const _IScntrl: _bindgen_ty_10 = 2;
pub const _ISpunct: _bindgen_ty_10 = 4;
pub const _ISalnum: _bindgen_ty_10 = 8;
pub type _bindgen_ty_10 = u32;
extern "C" {
    pub fn __ctype_b_loc() -> *mut *const ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn __ctype_tolower_loc() -> *mut *const __int32_t;
}
extern "C" {
    pub fn __ctype_toupper_loc() -> *mut *const __int32_t;
}
extern "C" {
    pub fn isalnum(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isalpha(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iscntrl(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isdigit(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn islower(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isgraph(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isprint(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ispunct(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isspace(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isupper(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isxdigit(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tolower(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn toupper(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isblank(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isascii(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn toascii(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _toupper(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _tolower(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isalnum_l(
        arg1: ::std::os::raw::c_int,
        arg2: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isalpha_l(
        arg1: ::std::os::raw::c_int,
        arg2: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iscntrl_l(
        arg1: ::std::os::raw::c_int,
        arg2: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isdigit_l(
        arg1: ::std::os::raw::c_int,
        arg2: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn islower_l(
        arg1: ::std::os::raw::c_int,
        arg2: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isgraph_l(
        arg1: ::std::os::raw::c_int,
        arg2: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isprint_l(
        arg1: ::std::os::raw::c_int,
        arg2: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ispunct_l(
        arg1: ::std::os::raw::c_int,
        arg2: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isspace_l(
        arg1: ::std::os::raw::c_int,
        arg2: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isupper_l(
        arg1: ::std::os::raw::c_int,
        arg2: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isxdigit_l(
        arg1: ::std::os::raw::c_int,
        arg2: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isblank_l(
        arg1: ::std::os::raw::c_int,
        arg2: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __tolower_l(
        __c: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tolower_l(
        __c: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __toupper_l(
        __c: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn toupper_l(
        __c: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> ::std::os::raw::c_int;
}
pub type useconds_t = __useconds_t;
pub type socklen_t = __socklen_t;
extern "C" {
    pub fn access(
        __name: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn faccessat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lseek(
        __fd: ::std::os::raw::c_int,
        __offset: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> __off_t;
}
extern "C" {
    pub fn close(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn read(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbytes: size_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn write(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: size_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn pread(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbytes: size_t,
        __offset: __off_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn pwrite(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: size_t,
        __offset: __off_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn pipe(__pipedes: *mut ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alarm(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sleep(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ualarm(
        __value: __useconds_t,
        __interval: __useconds_t,
    ) -> __useconds_t;
}
extern "C" {
    pub fn usleep(__useconds: __useconds_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pause() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chown(
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchown(
        __fd: ::std::os::raw::c_int,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lchown(
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchownat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chdir(
        __path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchdir(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getcwd(
        __buf: *mut ::std::os::raw::c_char,
        __size: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getwd(
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dup(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dup2(
        __fd: ::std::os::raw::c_int,
        __fd2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut __environ: *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn execve(
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fexecve(
        __fd: ::std::os::raw::c_int,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execv(
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execle(
        __path: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execl(
        __path: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execvp(
        __file: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execlp(
        __file: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nice(__inc: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _exit(__status: ::std::os::raw::c_int);
}
pub const _PC_LINK_MAX: _bindgen_ty_11 = 0;
pub const _PC_MAX_CANON: _bindgen_ty_11 = 1;
pub const _PC_MAX_INPUT: _bindgen_ty_11 = 2;
pub const _PC_NAME_MAX: _bindgen_ty_11 = 3;
pub const _PC_PATH_MAX: _bindgen_ty_11 = 4;
pub const _PC_PIPE_BUF: _bindgen_ty_11 = 5;
pub const _PC_CHOWN_RESTRICTED: _bindgen_ty_11 = 6;
pub const _PC_NO_TRUNC: _bindgen_ty_11 = 7;
pub const _PC_VDISABLE: _bindgen_ty_11 = 8;
pub const _PC_SYNC_IO: _bindgen_ty_11 = 9;
pub const _PC_ASYNC_IO: _bindgen_ty_11 = 10;
pub const _PC_PRIO_IO: _bindgen_ty_11 = 11;
pub const _PC_SOCK_MAXBUF: _bindgen_ty_11 = 12;
pub const _PC_FILESIZEBITS: _bindgen_ty_11 = 13;
pub const _PC_REC_INCR_XFER_SIZE: _bindgen_ty_11 = 14;
pub const _PC_REC_MAX_XFER_SIZE: _bindgen_ty_11 = 15;
pub const _PC_REC_MIN_XFER_SIZE: _bindgen_ty_11 = 16;
pub const _PC_REC_XFER_ALIGN: _bindgen_ty_11 = 17;
pub const _PC_ALLOC_SIZE_MIN: _bindgen_ty_11 = 18;
pub const _PC_SYMLINK_MAX: _bindgen_ty_11 = 19;
pub const _PC_2_SYMLINKS: _bindgen_ty_11 = 20;
pub type _bindgen_ty_11 = u32;
pub const _SC_ARG_MAX: _bindgen_ty_12 = 0;
pub const _SC_CHILD_MAX: _bindgen_ty_12 = 1;
pub const _SC_CLK_TCK: _bindgen_ty_12 = 2;
pub const _SC_NGROUPS_MAX: _bindgen_ty_12 = 3;
pub const _SC_OPEN_MAX: _bindgen_ty_12 = 4;
pub const _SC_STREAM_MAX: _bindgen_ty_12 = 5;
pub const _SC_TZNAME_MAX: _bindgen_ty_12 = 6;
pub const _SC_JOB_CONTROL: _bindgen_ty_12 = 7;
pub const _SC_SAVED_IDS: _bindgen_ty_12 = 8;
pub const _SC_REALTIME_SIGNALS: _bindgen_ty_12 = 9;
pub const _SC_PRIORITY_SCHEDULING: _bindgen_ty_12 = 10;
pub const _SC_TIMERS: _bindgen_ty_12 = 11;
pub const _SC_ASYNCHRONOUS_IO: _bindgen_ty_12 = 12;
pub const _SC_PRIORITIZED_IO: _bindgen_ty_12 = 13;
pub const _SC_SYNCHRONIZED_IO: _bindgen_ty_12 = 14;
pub const _SC_FSYNC: _bindgen_ty_12 = 15;
pub const _SC_MAPPED_FILES: _bindgen_ty_12 = 16;
pub const _SC_MEMLOCK: _bindgen_ty_12 = 17;
pub const _SC_MEMLOCK_RANGE: _bindgen_ty_12 = 18;
pub const _SC_MEMORY_PROTECTION: _bindgen_ty_12 = 19;
pub const _SC_MESSAGE_PASSING: _bindgen_ty_12 = 20;
pub const _SC_SEMAPHORES: _bindgen_ty_12 = 21;
pub const _SC_SHARED_MEMORY_OBJECTS: _bindgen_ty_12 = 22;
pub const _SC_AIO_LISTIO_MAX: _bindgen_ty_12 = 23;
pub const _SC_AIO_MAX: _bindgen_ty_12 = 24;
pub const _SC_AIO_PRIO_DELTA_MAX: _bindgen_ty_12 = 25;
pub const _SC_DELAYTIMER_MAX: _bindgen_ty_12 = 26;
pub const _SC_MQ_OPEN_MAX: _bindgen_ty_12 = 27;
pub const _SC_MQ_PRIO_MAX: _bindgen_ty_12 = 28;
pub const _SC_VERSION: _bindgen_ty_12 = 29;
pub const _SC_PAGESIZE: _bindgen_ty_12 = 30;
pub const _SC_RTSIG_MAX: _bindgen_ty_12 = 31;
pub const _SC_SEM_NSEMS_MAX: _bindgen_ty_12 = 32;
pub const _SC_SEM_VALUE_MAX: _bindgen_ty_12 = 33;
pub const _SC_SIGQUEUE_MAX: _bindgen_ty_12 = 34;
pub const _SC_TIMER_MAX: _bindgen_ty_12 = 35;
pub const _SC_BC_BASE_MAX: _bindgen_ty_12 = 36;
pub const _SC_BC_DIM_MAX: _bindgen_ty_12 = 37;
pub const _SC_BC_SCALE_MAX: _bindgen_ty_12 = 38;
pub const _SC_BC_STRING_MAX: _bindgen_ty_12 = 39;
pub const _SC_COLL_WEIGHTS_MAX: _bindgen_ty_12 = 40;
pub const _SC_EQUIV_CLASS_MAX: _bindgen_ty_12 = 41;
pub const _SC_EXPR_NEST_MAX: _bindgen_ty_12 = 42;
pub const _SC_LINE_MAX: _bindgen_ty_12 = 43;
pub const _SC_RE_DUP_MAX: _bindgen_ty_12 = 44;
pub const _SC_CHARCLASS_NAME_MAX: _bindgen_ty_12 = 45;
pub const _SC_2_VERSION: _bindgen_ty_12 = 46;
pub const _SC_2_C_BIND: _bindgen_ty_12 = 47;
pub const _SC_2_C_DEV: _bindgen_ty_12 = 48;
pub const _SC_2_FORT_DEV: _bindgen_ty_12 = 49;
pub const _SC_2_FORT_RUN: _bindgen_ty_12 = 50;
pub const _SC_2_SW_DEV: _bindgen_ty_12 = 51;
pub const _SC_2_LOCALEDEF: _bindgen_ty_12 = 52;
pub const _SC_PII: _bindgen_ty_12 = 53;
pub const _SC_PII_XTI: _bindgen_ty_12 = 54;
pub const _SC_PII_SOCKET: _bindgen_ty_12 = 55;
pub const _SC_PII_INTERNET: _bindgen_ty_12 = 56;
pub const _SC_PII_OSI: _bindgen_ty_12 = 57;
pub const _SC_POLL: _bindgen_ty_12 = 58;
pub const _SC_SELECT: _bindgen_ty_12 = 59;
pub const _SC_UIO_MAXIOV: _bindgen_ty_12 = 60;
pub const _SC_IOV_MAX: _bindgen_ty_12 = 60;
pub const _SC_PII_INTERNET_STREAM: _bindgen_ty_12 = 61;
pub const _SC_PII_INTERNET_DGRAM: _bindgen_ty_12 = 62;
pub const _SC_PII_OSI_COTS: _bindgen_ty_12 = 63;
pub const _SC_PII_OSI_CLTS: _bindgen_ty_12 = 64;
pub const _SC_PII_OSI_M: _bindgen_ty_12 = 65;
pub const _SC_T_IOV_MAX: _bindgen_ty_12 = 66;
pub const _SC_THREADS: _bindgen_ty_12 = 67;
pub const _SC_THREAD_SAFE_FUNCTIONS: _bindgen_ty_12 = 68;
pub const _SC_GETGR_R_SIZE_MAX: _bindgen_ty_12 = 69;
pub const _SC_GETPW_R_SIZE_MAX: _bindgen_ty_12 = 70;
pub const _SC_LOGIN_NAME_MAX: _bindgen_ty_12 = 71;
pub const _SC_TTY_NAME_MAX: _bindgen_ty_12 = 72;
pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: _bindgen_ty_12 = 73;
pub const _SC_THREAD_KEYS_MAX: _bindgen_ty_12 = 74;
pub const _SC_THREAD_STACK_MIN: _bindgen_ty_12 = 75;
pub const _SC_THREAD_THREADS_MAX: _bindgen_ty_12 = 76;
pub const _SC_THREAD_ATTR_STACKADDR: _bindgen_ty_12 = 77;
pub const _SC_THREAD_ATTR_STACKSIZE: _bindgen_ty_12 = 78;
pub const _SC_THREAD_PRIORITY_SCHEDULING: _bindgen_ty_12 = 79;
pub const _SC_THREAD_PRIO_INHERIT: _bindgen_ty_12 = 80;
pub const _SC_THREAD_PRIO_PROTECT: _bindgen_ty_12 = 81;
pub const _SC_THREAD_PROCESS_SHARED: _bindgen_ty_12 = 82;
pub const _SC_NPROCESSORS_CONF: _bindgen_ty_12 = 83;
pub const _SC_NPROCESSORS_ONLN: _bindgen_ty_12 = 84;
pub const _SC_PHYS_PAGES: _bindgen_ty_12 = 85;
pub const _SC_AVPHYS_PAGES: _bindgen_ty_12 = 86;
pub const _SC_ATEXIT_MAX: _bindgen_ty_12 = 87;
pub const _SC_PASS_MAX: _bindgen_ty_12 = 88;
pub const _SC_XOPEN_VERSION: _bindgen_ty_12 = 89;
pub const _SC_XOPEN_XCU_VERSION: _bindgen_ty_12 = 90;
pub const _SC_XOPEN_UNIX: _bindgen_ty_12 = 91;
pub const _SC_XOPEN_CRYPT: _bindgen_ty_12 = 92;
pub const _SC_XOPEN_ENH_I18N: _bindgen_ty_12 = 93;
pub const _SC_XOPEN_SHM: _bindgen_ty_12 = 94;
pub const _SC_2_CHAR_TERM: _bindgen_ty_12 = 95;
pub const _SC_2_C_VERSION: _bindgen_ty_12 = 96;
pub const _SC_2_UPE: _bindgen_ty_12 = 97;
pub const _SC_XOPEN_XPG2: _bindgen_ty_12 = 98;
pub const _SC_XOPEN_XPG3: _bindgen_ty_12 = 99;
pub const _SC_XOPEN_XPG4: _bindgen_ty_12 = 100;
pub const _SC_CHAR_BIT: _bindgen_ty_12 = 101;
pub const _SC_CHAR_MAX: _bindgen_ty_12 = 102;
pub const _SC_CHAR_MIN: _bindgen_ty_12 = 103;
pub const _SC_INT_MAX: _bindgen_ty_12 = 104;
pub const _SC_INT_MIN: _bindgen_ty_12 = 105;
pub const _SC_LONG_BIT: _bindgen_ty_12 = 106;
pub const _SC_WORD_BIT: _bindgen_ty_12 = 107;
pub const _SC_MB_LEN_MAX: _bindgen_ty_12 = 108;
pub const _SC_NZERO: _bindgen_ty_12 = 109;
pub const _SC_SSIZE_MAX: _bindgen_ty_12 = 110;
pub const _SC_SCHAR_MAX: _bindgen_ty_12 = 111;
pub const _SC_SCHAR_MIN: _bindgen_ty_12 = 112;
pub const _SC_SHRT_MAX: _bindgen_ty_12 = 113;
pub const _SC_SHRT_MIN: _bindgen_ty_12 = 114;
pub const _SC_UCHAR_MAX: _bindgen_ty_12 = 115;
pub const _SC_UINT_MAX: _bindgen_ty_12 = 116;
pub const _SC_ULONG_MAX: _bindgen_ty_12 = 117;
pub const _SC_USHRT_MAX: _bindgen_ty_12 = 118;
pub const _SC_NL_ARGMAX: _bindgen_ty_12 = 119;
pub const _SC_NL_LANGMAX: _bindgen_ty_12 = 120;
pub const _SC_NL_MSGMAX: _bindgen_ty_12 = 121;
pub const _SC_NL_NMAX: _bindgen_ty_12 = 122;
pub const _SC_NL_SETMAX: _bindgen_ty_12 = 123;
pub const _SC_NL_TEXTMAX: _bindgen_ty_12 = 124;
pub const _SC_XBS5_ILP32_OFF32: _bindgen_ty_12 = 125;
pub const _SC_XBS5_ILP32_OFFBIG: _bindgen_ty_12 = 126;
pub const _SC_XBS5_LP64_OFF64: _bindgen_ty_12 = 127;
pub const _SC_XBS5_LPBIG_OFFBIG: _bindgen_ty_12 = 128;
pub const _SC_XOPEN_LEGACY: _bindgen_ty_12 = 129;
pub const _SC_XOPEN_REALTIME: _bindgen_ty_12 = 130;
pub const _SC_XOPEN_REALTIME_THREADS: _bindgen_ty_12 = 131;
pub const _SC_ADVISORY_INFO: _bindgen_ty_12 = 132;
pub const _SC_BARRIERS: _bindgen_ty_12 = 133;
pub const _SC_BASE: _bindgen_ty_12 = 134;
pub const _SC_C_LANG_SUPPORT: _bindgen_ty_12 = 135;
pub const _SC_C_LANG_SUPPORT_R: _bindgen_ty_12 = 136;
pub const _SC_CLOCK_SELECTION: _bindgen_ty_12 = 137;
pub const _SC_CPUTIME: _bindgen_ty_12 = 138;
pub const _SC_THREAD_CPUTIME: _bindgen_ty_12 = 139;
pub const _SC_DEVICE_IO: _bindgen_ty_12 = 140;
pub const _SC_DEVICE_SPECIFIC: _bindgen_ty_12 = 141;
pub const _SC_DEVICE_SPECIFIC_R: _bindgen_ty_12 = 142;
pub const _SC_FD_MGMT: _bindgen_ty_12 = 143;
pub const _SC_FIFO: _bindgen_ty_12 = 144;
pub const _SC_PIPE: _bindgen_ty_12 = 145;
pub const _SC_FILE_ATTRIBUTES: _bindgen_ty_12 = 146;
pub const _SC_FILE_LOCKING: _bindgen_ty_12 = 147;
pub const _SC_FILE_SYSTEM: _bindgen_ty_12 = 148;
pub const _SC_MONOTONIC_CLOCK: _bindgen_ty_12 = 149;
pub const _SC_MULTI_PROCESS: _bindgen_ty_12 = 150;
pub const _SC_SINGLE_PROCESS: _bindgen_ty_12 = 151;
pub const _SC_NETWORKING: _bindgen_ty_12 = 152;
pub const _SC_READER_WRITER_LOCKS: _bindgen_ty_12 = 153;
pub const _SC_SPIN_LOCKS: _bindgen_ty_12 = 154;
pub const _SC_REGEXP: _bindgen_ty_12 = 155;
pub const _SC_REGEX_VERSION: _bindgen_ty_12 = 156;
pub const _SC_SHELL: _bindgen_ty_12 = 157;
pub const _SC_SIGNALS: _bindgen_ty_12 = 158;
pub const _SC_SPAWN: _bindgen_ty_12 = 159;
pub const _SC_SPORADIC_SERVER: _bindgen_ty_12 = 160;
pub const _SC_THREAD_SPORADIC_SERVER: _bindgen_ty_12 = 161;
pub const _SC_SYSTEM_DATABASE: _bindgen_ty_12 = 162;
pub const _SC_SYSTEM_DATABASE_R: _bindgen_ty_12 = 163;
pub const _SC_TIMEOUTS: _bindgen_ty_12 = 164;
pub const _SC_TYPED_MEMORY_OBJECTS: _bindgen_ty_12 = 165;
pub const _SC_USER_GROUPS: _bindgen_ty_12 = 166;
pub const _SC_USER_GROUPS_R: _bindgen_ty_12 = 167;
pub const _SC_2_PBS: _bindgen_ty_12 = 168;
pub const _SC_2_PBS_ACCOUNTING: _bindgen_ty_12 = 169;
pub const _SC_2_PBS_LOCATE: _bindgen_ty_12 = 170;
pub const _SC_2_PBS_MESSAGE: _bindgen_ty_12 = 171;
pub const _SC_2_PBS_TRACK: _bindgen_ty_12 = 172;
pub const _SC_SYMLOOP_MAX: _bindgen_ty_12 = 173;
pub const _SC_STREAMS: _bindgen_ty_12 = 174;
pub const _SC_2_PBS_CHECKPOINT: _bindgen_ty_12 = 175;
pub const _SC_V6_ILP32_OFF32: _bindgen_ty_12 = 176;
pub const _SC_V6_ILP32_OFFBIG: _bindgen_ty_12 = 177;
pub const _SC_V6_LP64_OFF64: _bindgen_ty_12 = 178;
pub const _SC_V6_LPBIG_OFFBIG: _bindgen_ty_12 = 179;
pub const _SC_HOST_NAME_MAX: _bindgen_ty_12 = 180;
pub const _SC_TRACE: _bindgen_ty_12 = 181;
pub const _SC_TRACE_EVENT_FILTER: _bindgen_ty_12 = 182;
pub const _SC_TRACE_INHERIT: _bindgen_ty_12 = 183;
pub const _SC_TRACE_LOG: _bindgen_ty_12 = 184;
pub const _SC_LEVEL1_ICACHE_SIZE: _bindgen_ty_12 = 185;
pub const _SC_LEVEL1_ICACHE_ASSOC: _bindgen_ty_12 = 186;
pub const _SC_LEVEL1_ICACHE_LINESIZE: _bindgen_ty_12 = 187;
pub const _SC_LEVEL1_DCACHE_SIZE: _bindgen_ty_12 = 188;
pub const _SC_LEVEL1_DCACHE_ASSOC: _bindgen_ty_12 = 189;
pub const _SC_LEVEL1_DCACHE_LINESIZE: _bindgen_ty_12 = 190;
pub const _SC_LEVEL2_CACHE_SIZE: _bindgen_ty_12 = 191;
pub const _SC_LEVEL2_CACHE_ASSOC: _bindgen_ty_12 = 192;
pub const _SC_LEVEL2_CACHE_LINESIZE: _bindgen_ty_12 = 193;
pub const _SC_LEVEL3_CACHE_SIZE: _bindgen_ty_12 = 194;
pub const _SC_LEVEL3_CACHE_ASSOC: _bindgen_ty_12 = 195;
pub const _SC_LEVEL3_CACHE_LINESIZE: _bindgen_ty_12 = 196;
pub const _SC_LEVEL4_CACHE_SIZE: _bindgen_ty_12 = 197;
pub const _SC_LEVEL4_CACHE_ASSOC: _bindgen_ty_12 = 198;
pub const _SC_LEVEL4_CACHE_LINESIZE: _bindgen_ty_12 = 199;
pub const _SC_IPV6: _bindgen_ty_12 = 235;
pub const _SC_RAW_SOCKETS: _bindgen_ty_12 = 236;
pub const _SC_V7_ILP32_OFF32: _bindgen_ty_12 = 237;
pub const _SC_V7_ILP32_OFFBIG: _bindgen_ty_12 = 238;
pub const _SC_V7_LP64_OFF64: _bindgen_ty_12 = 239;
pub const _SC_V7_LPBIG_OFFBIG: _bindgen_ty_12 = 240;
pub const _SC_SS_REPL_MAX: _bindgen_ty_12 = 241;
pub const _SC_TRACE_EVENT_NAME_MAX: _bindgen_ty_12 = 242;
pub const _SC_TRACE_NAME_MAX: _bindgen_ty_12 = 243;
pub const _SC_TRACE_SYS_MAX: _bindgen_ty_12 = 244;
pub const _SC_TRACE_USER_EVENT_MAX: _bindgen_ty_12 = 245;
pub const _SC_XOPEN_STREAMS: _bindgen_ty_12 = 246;
pub const _SC_THREAD_ROBUST_PRIO_INHERIT: _bindgen_ty_12 = 247;
pub const _SC_THREAD_ROBUST_PRIO_PROTECT: _bindgen_ty_12 = 248;
pub type _bindgen_ty_12 = u32;
pub const _CS_PATH: _bindgen_ty_13 = 0;
pub const _CS_V6_WIDTH_RESTRICTED_ENVS: _bindgen_ty_13 = 1;
pub const _CS_GNU_LIBC_VERSION: _bindgen_ty_13 = 2;
pub const _CS_GNU_LIBPTHREAD_VERSION: _bindgen_ty_13 = 3;
pub const _CS_V5_WIDTH_RESTRICTED_ENVS: _bindgen_ty_13 = 4;
pub const _CS_V7_WIDTH_RESTRICTED_ENVS: _bindgen_ty_13 = 5;
pub const _CS_LFS_CFLAGS: _bindgen_ty_13 = 1000;
pub const _CS_LFS_LDFLAGS: _bindgen_ty_13 = 1001;
pub const _CS_LFS_LIBS: _bindgen_ty_13 = 1002;
pub const _CS_LFS_LINTFLAGS: _bindgen_ty_13 = 1003;
pub const _CS_LFS64_CFLAGS: _bindgen_ty_13 = 1004;
pub const _CS_LFS64_LDFLAGS: _bindgen_ty_13 = 1005;
pub const _CS_LFS64_LIBS: _bindgen_ty_13 = 1006;
pub const _CS_LFS64_LINTFLAGS: _bindgen_ty_13 = 1007;
pub const _CS_XBS5_ILP32_OFF32_CFLAGS: _bindgen_ty_13 = 1100;
pub const _CS_XBS5_ILP32_OFF32_LDFLAGS: _bindgen_ty_13 = 1101;
pub const _CS_XBS5_ILP32_OFF32_LIBS: _bindgen_ty_13 = 1102;
pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS: _bindgen_ty_13 = 1103;
pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS: _bindgen_ty_13 = 1104;
pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_13 = 1105;
pub const _CS_XBS5_ILP32_OFFBIG_LIBS: _bindgen_ty_13 = 1106;
pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_13 = 1107;
pub const _CS_XBS5_LP64_OFF64_CFLAGS: _bindgen_ty_13 = 1108;
pub const _CS_XBS5_LP64_OFF64_LDFLAGS: _bindgen_ty_13 = 1109;
pub const _CS_XBS5_LP64_OFF64_LIBS: _bindgen_ty_13 = 1110;
pub const _CS_XBS5_LP64_OFF64_LINTFLAGS: _bindgen_ty_13 = 1111;
pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_13 = 1112;
pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_13 = 1113;
pub const _CS_XBS5_LPBIG_OFFBIG_LIBS: _bindgen_ty_13 = 1114;
pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_13 = 1115;
pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: _bindgen_ty_13 = 1116;
pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: _bindgen_ty_13 = 1117;
pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: _bindgen_ty_13 = 1118;
pub const _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS: _bindgen_ty_13 = 1119;
pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: _bindgen_ty_13 = 1120;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_13 = 1121;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: _bindgen_ty_13 = 1122;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_13 = 1123;
pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: _bindgen_ty_13 = 1124;
pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: _bindgen_ty_13 = 1125;
pub const _CS_POSIX_V6_LP64_OFF64_LIBS: _bindgen_ty_13 = 1126;
pub const _CS_POSIX_V6_LP64_OFF64_LINTFLAGS: _bindgen_ty_13 = 1127;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_13 = 1128;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_13 = 1129;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: _bindgen_ty_13 = 1130;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_13 = 1131;
pub const _CS_POSIX_V7_ILP32_OFF32_CFLAGS: _bindgen_ty_13 = 1132;
pub const _CS_POSIX_V7_ILP32_OFF32_LDFLAGS: _bindgen_ty_13 = 1133;
pub const _CS_POSIX_V7_ILP32_OFF32_LIBS: _bindgen_ty_13 = 1134;
pub const _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS: _bindgen_ty_13 = 1135;
pub const _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS: _bindgen_ty_13 = 1136;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_13 = 1137;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LIBS: _bindgen_ty_13 = 1138;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_13 = 1139;
pub const _CS_POSIX_V7_LP64_OFF64_CFLAGS: _bindgen_ty_13 = 1140;
pub const _CS_POSIX_V7_LP64_OFF64_LDFLAGS: _bindgen_ty_13 = 1141;
pub const _CS_POSIX_V7_LP64_OFF64_LIBS: _bindgen_ty_13 = 1142;
pub const _CS_POSIX_V7_LP64_OFF64_LINTFLAGS: _bindgen_ty_13 = 1143;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_13 = 1144;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_13 = 1145;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LIBS: _bindgen_ty_13 = 1146;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_13 = 1147;
pub const _CS_V6_ENV: _bindgen_ty_13 = 1148;
pub const _CS_V7_ENV: _bindgen_ty_13 = 1149;
pub type _bindgen_ty_13 = u32;
extern "C" {
    pub fn pathconf(
        __path: *const ::std::os::raw::c_char,
        __name: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn fpathconf(
        __fd: ::std::os::raw::c_int,
        __name: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn sysconf(__name: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn confstr(
        __name: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn getpid() -> __pid_t;
}
extern "C" {
    pub fn getppid() -> __pid_t;
}
extern "C" {
    pub fn getpgrp() -> __pid_t;
}
extern "C" {
    pub fn __getpgid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn getpgid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn setpgid(__pid: __pid_t, __pgid: __pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpgrp() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsid() -> __pid_t;
}
extern "C" {
    pub fn getsid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn getuid() -> __uid_t;
}
extern "C" {
    pub fn geteuid() -> __uid_t;
}
extern "C" {
    pub fn getgid() -> __gid_t;
}
extern "C" {
    pub fn getegid() -> __gid_t;
}
extern "C" {
    pub fn getgroups(
        __size: ::std::os::raw::c_int,
        __list: *mut __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setuid(__uid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setreuid(__ruid: __uid_t, __euid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seteuid(__uid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setgid(__gid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setregid(__rgid: __gid_t, __egid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setegid(__gid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fork() -> __pid_t;
}
extern "C" {
    pub fn vfork() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyname(__fd: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ttyname_r(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isatty(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyslot() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn link(
        __from: *const ::std::os::raw::c_char,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn linkat(
        __fromfd: ::std::os::raw::c_int,
        __from: *const ::std::os::raw::c_char,
        __tofd: ::std::os::raw::c_int,
        __to: *const ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symlink(
        __from: *const ::std::os::raw::c_char,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlink(
        __path: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn symlinkat(
        __from: *const ::std::os::raw::c_char,
        __tofd: ::std::os::raw::c_int,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlinkat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn unlink(
        __name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlinkat(
        __fd: ::std::os::raw::c_int,
        __name: *const ::std::os::raw::c_char,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rmdir(
        __path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcgetpgrp(__fd: ::std::os::raw::c_int) -> __pid_t;
}
extern "C" {
    pub fn tcsetpgrp(
        __fd: ::std::os::raw::c_int,
        __pgrp_id: __pid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getlogin() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getlogin_r(
        __name: *mut ::std::os::raw::c_char,
        __name_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setlogin(
        __name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optarg: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut optind: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut opterr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optopt: ::std::os::raw::c_int;
}
extern "C" {
    pub fn getopt(
        ___argc: ::std::os::raw::c_int,
        ___argv: *const *mut ::std::os::raw::c_char,
        __shortopts: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostname(
        __name: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sethostname(
        __name: *const ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sethostid(__id: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdomainname(
        __name: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setdomainname(
        __name: *const ::std::os::raw::c_char,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vhangup() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn revoke(
        __file: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn profil(
        __sample_buffer: *mut ::std::os::raw::c_ushort,
        __size: size_t,
        __offset: size_t,
        __scale: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acct(__name: *const ::std::os::raw::c_char)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getusershell() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn endusershell();
}
extern "C" {
    pub fn setusershell();
}
extern "C" {
    pub fn daemon(
        __nochdir: ::std::os::raw::c_int,
        __noclose: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chroot(
        __path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpass(
        __prompt: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fsync(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostid() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn sync();
}
extern "C" {
    pub fn getpagesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdtablesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn truncate(
        __file: *const ::std::os::raw::c_char,
        __length: __off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftruncate(
        __fd: ::std::os::raw::c_int,
        __length: __off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn brk(__addr: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sbrk(__delta: isize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn syscall(
        __sysno: ::std::os::raw::c_long,
        ...
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lockf(
        __fd: ::std::os::raw::c_int,
        __cmd: ::std::os::raw::c_int,
        __len: __off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fdatasync(__fildes: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypt(
        __key: *const ::std::os::raw::c_char,
        __salt: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getentropy(
        __buffer: *mut ::std::os::raw::c_void,
        __length: size_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iovec {
    pub iov_base: *mut ::std::os::raw::c_void,
    pub iov_len: size_t,
}
#[test]
fn bindgen_test_layout_iovec() {
    assert_eq!(
        ::std::mem::size_of::<iovec>(),
        16usize,
        concat!("Size of: ", stringify!(iovec))
    );
    assert_eq!(
        ::std::mem::align_of::<iovec>(),
        8usize,
        concat!("Alignment of ", stringify!(iovec))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<iovec>())).iov_base as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<iovec>())).iov_len as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_len)
        )
    );
}
pub const __socket_type_SOCK_STREAM: __socket_type = 1;
pub const __socket_type_SOCK_DGRAM: __socket_type = 2;
pub const __socket_type_SOCK_RAW: __socket_type = 3;
pub const __socket_type_SOCK_RDM: __socket_type = 4;
pub const __socket_type_SOCK_SEQPACKET: __socket_type = 5;
pub const __socket_type_SOCK_DCCP: __socket_type = 6;
pub const __socket_type_SOCK_PACKET: __socket_type = 10;
pub const __socket_type_SOCK_CLOEXEC: __socket_type = 524288;
pub const __socket_type_SOCK_NONBLOCK: __socket_type = 2048;
pub type __socket_type = u32;
pub type sa_family_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr {
    pub sa_family: sa_family_t,
    pub sa_data: [::std::os::raw::c_char; 14usize],
}
#[test]
fn bindgen_test_layout_sockaddr() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr>(),
        16usize,
        concat!("Size of: ", stringify!(sockaddr))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr>(),
        2usize,
        concat!("Alignment of ", stringify!(sockaddr))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sockaddr>())).sa_family as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr),
            "::",
            stringify!(sa_family)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sockaddr>())).sa_data as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr),
            "::",
            stringify!(sa_data)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sockaddr_storage {
    pub ss_family: sa_family_t,
    pub __ss_padding: [::std::os::raw::c_char; 118usize],
    pub __ss_align: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_sockaddr_storage() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr_storage>(),
        128usize,
        concat!("Size of: ", stringify!(sockaddr_storage))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_storage>(),
        8usize,
        concat!("Alignment of ", stringify!(sockaddr_storage))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sockaddr_storage>())).ss_family as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(ss_family)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sockaddr_storage>())).__ss_padding
                as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(__ss_padding)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sockaddr_storage>())).__ss_align as *const _
                as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(__ss_align)
        )
    );
}
pub const MSG_OOB: _bindgen_ty_14 = 1;
pub const MSG_PEEK: _bindgen_ty_14 = 2;
pub const MSG_DONTROUTE: _bindgen_ty_14 = 4;
pub const MSG_CTRUNC: _bindgen_ty_14 = 8;
pub const MSG_PROXY: _bindgen_ty_14 = 16;
pub const MSG_TRUNC: _bindgen_ty_14 = 32;
pub const MSG_DONTWAIT: _bindgen_ty_14 = 64;
pub const MSG_EOR: _bindgen_ty_14 = 128;
pub const MSG_WAITALL: _bindgen_ty_14 = 256;
pub const MSG_FIN: _bindgen_ty_14 = 512;
pub const MSG_SYN: _bindgen_ty_14 = 1024;
pub const MSG_CONFIRM: _bindgen_ty_14 = 2048;
pub const MSG_RST: _bindgen_ty_14 = 4096;
pub const MSG_ERRQUEUE: _bindgen_ty_14 = 8192;
pub const MSG_NOSIGNAL: _bindgen_ty_14 = 16384;
pub const MSG_MORE: _bindgen_ty_14 = 32768;
pub const MSG_WAITFORONE: _bindgen_ty_14 = 65536;
pub const MSG_BATCH: _bindgen_ty_14 = 262144;
pub const MSG_ZEROCOPY: _bindgen_ty_14 = 67108864;
pub const MSG_FASTOPEN: _bindgen_ty_14 = 536870912;
pub const MSG_CMSG_CLOEXEC: _bindgen_ty_14 = 1073741824;
pub type _bindgen_ty_14 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msghdr {
    pub msg_name: *mut ::std::os::raw::c_void,
    pub msg_namelen: socklen_t,
    pub msg_iov: *mut iovec,
    pub msg_iovlen: size_t,
    pub msg_control: *mut ::std::os::raw::c_void,
    pub msg_controllen: size_t,
    pub msg_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_msghdr() {
    assert_eq!(
        ::std::mem::size_of::<msghdr>(),
        56usize,
        concat!("Size of: ", stringify!(msghdr))
    );
    assert_eq!(
        ::std::mem::align_of::<msghdr>(),
        8usize,
        concat!("Alignment of ", stringify!(msghdr))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<msghdr>())).msg_name as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<msghdr>())).msg_namelen as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_namelen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<msghdr>())).msg_iov as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_iov)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<msghdr>())).msg_iovlen as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_iovlen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<msghdr>())).msg_control as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_control)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<msghdr>())).msg_controllen as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_controllen)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<msghdr>())).msg_flags as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct cmsghdr {
    pub cmsg_len: size_t,
    pub cmsg_level: ::std::os::raw::c_int,
    pub cmsg_type: ::std::os::raw::c_int,
    pub __cmsg_data: __IncompleteArrayField<::std::os::raw::c_uchar>,
}
#[test]
fn bindgen_test_layout_cmsghdr() {
    assert_eq!(
        ::std::mem::size_of::<cmsghdr>(),
        16usize,
        concat!("Size of: ", stringify!(cmsghdr))
    );
    assert_eq!(
        ::std::mem::align_of::<cmsghdr>(),
        8usize,
        concat!("Alignment of ", stringify!(cmsghdr))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cmsghdr>())).cmsg_len as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(cmsg_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cmsghdr>())).cmsg_level as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(cmsg_level)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cmsghdr>())).cmsg_type as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(cmsg_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cmsghdr>())).__cmsg_data as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(__cmsg_data)
        )
    );
}
extern "C" {
    pub fn __cmsg_nxthdr(
        __mhdr: *mut msghdr,
        __cmsg: *mut cmsghdr,
    ) -> *mut cmsghdr;
}
pub const SCM_RIGHTS: _bindgen_ty_15 = 1;
pub type _bindgen_ty_15 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fd_set {
    pub fds_bits: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___kernel_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<__kernel_fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__kernel_fd_set>())).fds_bits as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fd_set),
            "::",
            stringify!(fds_bits)
        )
    );
}
pub type __kernel_sighandler_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type __kernel_key_t = ::std::os::raw::c_int;
pub type __kernel_mqd_t = ::std::os::raw::c_int;
pub type __kernel_old_uid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_gid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_dev_t = ::std::os::raw::c_ulong;
pub type __kernel_long_t = ::std::os::raw::c_long;
pub type __kernel_ulong_t = ::std::os::raw::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = ::std::os::raw::c_uint;
pub type __kernel_pid_t = ::std::os::raw::c_int;
pub type __kernel_ipc_pid_t = ::std::os::raw::c_int;
pub type __kernel_uid_t = ::std::os::raw::c_uint;
pub type __kernel_gid_t = ::std::os::raw::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::std::os::raw::c_int;
pub type __kernel_uid32_t = ::std::os::raw::c_uint;
pub type __kernel_gid32_t = ::std::os::raw::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fsid_t {
    pub val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___kernel_fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__kernel_fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__kernel_fsid_t>())).val as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fsid_t),
            "::",
            stringify!(val)
        )
    );
}
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::std::os::raw::c_longlong;
pub type __kernel_old_time_t = __kernel_long_t;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_time64_t = ::std::os::raw::c_longlong;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::std::os::raw::c_int;
pub type __kernel_clockid_t = ::std::os::raw::c_int;
pub type __kernel_caddr_t = *mut ::std::os::raw::c_char;
pub type __kernel_uid16_t = ::std::os::raw::c_ushort;
pub type __kernel_gid16_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct linger {
    pub l_onoff: ::std::os::raw::c_int,
    pub l_linger: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_linger() {
    assert_eq!(
        ::std::mem::size_of::<linger>(),
        8usize,
        concat!("Size of: ", stringify!(linger))
    );
    assert_eq!(
        ::std::mem::align_of::<linger>(),
        4usize,
        concat!("Alignment of ", stringify!(linger))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<linger>())).l_onoff as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linger),
            "::",
            stringify!(l_onoff)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<linger>())).l_linger as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(linger),
            "::",
            stringify!(l_linger)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct osockaddr {
    pub sa_family: ::std::os::raw::c_ushort,
    pub sa_data: [::std::os::raw::c_uchar; 14usize],
}
#[test]
fn bindgen_test_layout_osockaddr() {
    assert_eq!(
        ::std::mem::size_of::<osockaddr>(),
        16usize,
        concat!("Size of: ", stringify!(osockaddr))
    );
    assert_eq!(
        ::std::mem::align_of::<osockaddr>(),
        2usize,
        concat!("Alignment of ", stringify!(osockaddr))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<osockaddr>())).sa_family as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(osockaddr),
            "::",
            stringify!(sa_family)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<osockaddr>())).sa_data as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(osockaddr),
            "::",
            stringify!(sa_data)
        )
    );
}
pub const SHUT_RD: _bindgen_ty_16 = 0;
pub const SHUT_WR: _bindgen_ty_16 = 1;
pub const SHUT_RDWR: _bindgen_ty_16 = 2;
pub type _bindgen_ty_16 = u32;
extern "C" {
    pub fn socket(
        __domain: ::std::os::raw::c_int,
        __type: ::std::os::raw::c_int,
        __protocol: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn socketpair(
        __domain: ::std::os::raw::c_int,
        __type: ::std::os::raw::c_int,
        __protocol: ::std::os::raw::c_int,
        __fds: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bind(
        __fd: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __len: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsockname(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn connect(
        __fd: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __len: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpeername(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn send(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: size_t,
        __flags: ::std::os::raw::c_int,
    ) -> ssize_t;
}
extern "C" {
    pub fn recv(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __n: size_t,
        __flags: ::std::os::raw::c_int,
    ) -> ssize_t;
}
extern "C" {
    pub fn sendto(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: size_t,
        __flags: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __addr_len: socklen_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn recvfrom(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __n: size_t,
        __flags: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __addr_len: *mut socklen_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn sendmsg(
        __fd: ::std::os::raw::c_int,
        __message: *const msghdr,
        __flags: ::std::os::raw::c_int,
    ) -> ssize_t;
}
extern "C" {
    pub fn recvmsg(
        __fd: ::std::os::raw::c_int,
        __message: *mut msghdr,
        __flags: ::std::os::raw::c_int,
    ) -> ssize_t;
}
extern "C" {
    pub fn getsockopt(
        __fd: ::std::os::raw::c_int,
        __level: ::std::os::raw::c_int,
        __optname: ::std::os::raw::c_int,
        __optval: *mut ::std::os::raw::c_void,
        __optlen: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsockopt(
        __fd: ::std::os::raw::c_int,
        __level: ::std::os::raw::c_int,
        __optname: ::std::os::raw::c_int,
        __optval: *const ::std::os::raw::c_void,
        __optlen: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn listen(
        __fd: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn accept(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __addr_len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shutdown(
        __fd: ::std::os::raw::c_int,
        __how: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sockatmark(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isfdtype(
        __fd: ::std::os::raw::c_int,
        __fdtype: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type in_addr_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_addr {
    pub s_addr: in_addr_t,
}
#[test]
fn bindgen_test_layout_in_addr() {
    assert_eq!(
        ::std::mem::size_of::<in_addr>(),
        4usize,
        concat!("Size of: ", stringify!(in_addr))
    );
    assert_eq!(
        ::std::mem::align_of::<in_addr>(),
        4usize,
        concat!("Alignment of ", stringify!(in_addr))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<in_addr>())).s_addr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in_addr),
            "::",
            stringify!(s_addr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ip_opts {
    pub ip_dst: in_addr,
    pub ip_opts: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout_ip_opts() {
    assert_eq!(
        ::std::mem::size_of::<ip_opts>(),
        44usize,
        concat!("Size of: ", stringify!(ip_opts))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_opts>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_opts))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ip_opts>())).ip_dst as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_opts),
            "::",
            stringify!(ip_dst)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ip_opts>())).ip_opts as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_opts),
            "::",
            stringify!(ip_opts)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreqn {
    pub imr_multiaddr: in_addr,
    pub imr_address: in_addr,
    pub imr_ifindex: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ip_mreqn() {
    assert_eq!(
        ::std::mem::size_of::<ip_mreqn>(),
        12usize,
        concat!("Size of: ", stringify!(ip_mreqn))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_mreqn>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_mreqn))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ip_mreqn>())).imr_multiaddr as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreqn),
            "::",
            stringify!(imr_multiaddr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ip_mreqn>())).imr_address as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreqn),
            "::",
            stringify!(imr_address)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ip_mreqn>())).imr_ifindex as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreqn),
            "::",
            stringify!(imr_ifindex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_pktinfo {
    pub ipi_ifindex: ::std::os::raw::c_int,
    pub ipi_spec_dst: in_addr,
    pub ipi_addr: in_addr,
}
#[test]
fn bindgen_test_layout_in_pktinfo() {
    assert_eq!(
        ::std::mem::size_of::<in_pktinfo>(),
        12usize,
        concat!("Size of: ", stringify!(in_pktinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<in_pktinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(in_pktinfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<in_pktinfo>())).ipi_ifindex as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in_pktinfo),
            "::",
            stringify!(ipi_ifindex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<in_pktinfo>())).ipi_spec_dst as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(in_pktinfo),
            "::",
            stringify!(ipi_spec_dst)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<in_pktinfo>())).ipi_addr as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(in_pktinfo),
            "::",
            stringify!(ipi_addr)
        )
    );
}
pub const IPPROTO_IP: _bindgen_ty_17 = 0;
pub const IPPROTO_ICMP: _bindgen_ty_17 = 1;
pub const IPPROTO_IGMP: _bindgen_ty_17 = 2;
pub const IPPROTO_IPIP: _bindgen_ty_17 = 4;
pub const IPPROTO_TCP: _bindgen_ty_17 = 6;
pub const IPPROTO_EGP: _bindgen_ty_17 = 8;
pub const IPPROTO_PUP: _bindgen_ty_17 = 12;
pub const IPPROTO_UDP: _bindgen_ty_17 = 17;
pub const IPPROTO_IDP: _bindgen_ty_17 = 22;
pub const IPPROTO_TP: _bindgen_ty_17 = 29;
pub const IPPROTO_DCCP: _bindgen_ty_17 = 33;
pub const IPPROTO_IPV6: _bindgen_ty_17 = 41;
pub const IPPROTO_RSVP: _bindgen_ty_17 = 46;
pub const IPPROTO_GRE: _bindgen_ty_17 = 47;
pub const IPPROTO_ESP: _bindgen_ty_17 = 50;
pub const IPPROTO_AH: _bindgen_ty_17 = 51;
pub const IPPROTO_MTP: _bindgen_ty_17 = 92;
pub const IPPROTO_BEETPH: _bindgen_ty_17 = 94;
pub const IPPROTO_ENCAP: _bindgen_ty_17 = 98;
pub const IPPROTO_PIM: _bindgen_ty_17 = 103;
pub const IPPROTO_COMP: _bindgen_ty_17 = 108;
pub const IPPROTO_SCTP: _bindgen_ty_17 = 132;
pub const IPPROTO_UDPLITE: _bindgen_ty_17 = 136;
pub const IPPROTO_MPLS: _bindgen_ty_17 = 137;
pub const IPPROTO_RAW: _bindgen_ty_17 = 255;
pub const IPPROTO_MAX: _bindgen_ty_17 = 256;
pub type _bindgen_ty_17 = u32;
pub const IPPROTO_HOPOPTS: _bindgen_ty_18 = 0;
pub const IPPROTO_ROUTING: _bindgen_ty_18 = 43;
pub const IPPROTO_FRAGMENT: _bindgen_ty_18 = 44;
pub const IPPROTO_ICMPV6: _bindgen_ty_18 = 58;
pub const IPPROTO_NONE: _bindgen_ty_18 = 59;
pub const IPPROTO_DSTOPTS: _bindgen_ty_18 = 60;
pub const IPPROTO_MH: _bindgen_ty_18 = 135;
pub type _bindgen_ty_18 = u32;
pub type in_port_t = u16;
pub const IPPORT_ECHO: _bindgen_ty_19 = 7;
pub const IPPORT_DISCARD: _bindgen_ty_19 = 9;
pub const IPPORT_SYSTAT: _bindgen_ty_19 = 11;
pub const IPPORT_DAYTIME: _bindgen_ty_19 = 13;
pub const IPPORT_NETSTAT: _bindgen_ty_19 = 15;
pub const IPPORT_FTP: _bindgen_ty_19 = 21;
pub const IPPORT_TELNET: _bindgen_ty_19 = 23;
pub const IPPORT_SMTP: _bindgen_ty_19 = 25;
pub const IPPORT_TIMESERVER: _bindgen_ty_19 = 37;
pub const IPPORT_NAMESERVER: _bindgen_ty_19 = 42;
pub const IPPORT_WHOIS: _bindgen_ty_19 = 43;
pub const IPPORT_MTP: _bindgen_ty_19 = 57;
pub const IPPORT_TFTP: _bindgen_ty_19 = 69;
pub const IPPORT_RJE: _bindgen_ty_19 = 77;
pub const IPPORT_FINGER: _bindgen_ty_19 = 79;
pub const IPPORT_TTYLINK: _bindgen_ty_19 = 87;
pub const IPPORT_SUPDUP: _bindgen_ty_19 = 95;
pub const IPPORT_EXECSERVER: _bindgen_ty_19 = 512;
pub const IPPORT_LOGINSERVER: _bindgen_ty_19 = 513;
pub const IPPORT_CMDSERVER: _bindgen_ty_19 = 514;
pub const IPPORT_EFSSERVER: _bindgen_ty_19 = 520;
pub const IPPORT_BIFFUDP: _bindgen_ty_19 = 512;
pub const IPPORT_WHOSERVER: _bindgen_ty_19 = 513;
pub const IPPORT_ROUTESERVER: _bindgen_ty_19 = 520;
pub const IPPORT_RESERVED: _bindgen_ty_19 = 1024;
pub const IPPORT_USERRESERVED: _bindgen_ty_19 = 5000;
pub type _bindgen_ty_19 = u32;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_addr {
    pub __in6_u: in6_addr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union in6_addr__bindgen_ty_1 {
    pub __u6_addr8: [u8; 16usize],
    pub __u6_addr16: [u16; 8usize],
    pub __u6_addr32: [u32; 4usize],
    _bindgen_union_align: [u32; 4usize],
}
#[test]
fn bindgen_test_layout_in6_addr__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<in6_addr__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(in6_addr__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<in6_addr__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(in6_addr__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<in6_addr__bindgen_ty_1>())).__u6_addr8
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr__bindgen_ty_1),
            "::",
            stringify!(__u6_addr8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<in6_addr__bindgen_ty_1>())).__u6_addr16
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr__bindgen_ty_1),
            "::",
            stringify!(__u6_addr16)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<in6_addr__bindgen_ty_1>())).__u6_addr32
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr__bindgen_ty_1),
            "::",
            stringify!(__u6_addr32)
        )
    );
}
#[test]
fn bindgen_test_layout_in6_addr() {
    assert_eq!(
        ::std::mem::size_of::<in6_addr>(),
        16usize,
        concat!("Size of: ", stringify!(in6_addr))
    );
    assert_eq!(
        ::std::mem::align_of::<in6_addr>(),
        4usize,
        concat!("Alignment of ", stringify!(in6_addr))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<in6_addr>())).__in6_u as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr),
            "::",
            stringify!(__in6_u)
        )
    );
}
extern "C" {
    pub static in6addr_any: in6_addr;
}
extern "C" {
    pub static in6addr_loopback: in6_addr;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_in {
    pub sin_family: sa_family_t,
    pub sin_port: in_port_t,
    pub sin_addr: in_addr,
    pub sin_zero: [::std::os::raw::c_uchar; 8usize],
}
#[test]
fn bindgen_test_layout_sockaddr_in() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr_in>(),
        16usize,
        concat!("Size of: ", stringify!(sockaddr_in))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_in>(),
        4usize,
        concat!("Alignment of ", stringify!(sockaddr_in))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sockaddr_in>())).sin_family as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_family)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sockaddr_in>())).sin_port as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_port)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sockaddr_in>())).sin_addr as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sockaddr_in>())).sin_zero as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_zero)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sockaddr_in6 {
    pub sin6_family: sa_family_t,
    pub sin6_port: in_port_t,
    pub sin6_flowinfo: u32,
    pub sin6_addr: in6_addr,
    pub sin6_scope_id: u32,
}
#[test]
fn bindgen_test_layout_sockaddr_in6() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr_in6>(),
        28usize,
        concat!("Size of: ", stringify!(sockaddr_in6))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_in6>(),
        4usize,
        concat!("Alignment of ", stringify!(sockaddr_in6))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sockaddr_in6>())).sin6_family as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_family)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sockaddr_in6>())).sin6_port as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_port)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sockaddr_in6>())).sin6_flowinfo as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_flowinfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sockaddr_in6>())).sin6_addr as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sockaddr_in6>())).sin6_scope_id as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_scope_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreq {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
}
#[test]
fn bindgen_test_layout_ip_mreq() {
    assert_eq!(
        ::std::mem::size_of::<ip_mreq>(),
        8usize,
        concat!("Size of: ", stringify!(ip_mreq))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_mreq>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_mreq))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ip_mreq>())).imr_multiaddr as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq),
            "::",
            stringify!(imr_multiaddr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ip_mreq>())).imr_interface as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq),
            "::",
            stringify!(imr_interface)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreq_source {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
    pub imr_sourceaddr: in_addr,
}
#[test]
fn bindgen_test_layout_ip_mreq_source() {
    assert_eq!(
        ::std::mem::size_of::<ip_mreq_source>(),
        12usize,
        concat!("Size of: ", stringify!(ip_mreq_source))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_mreq_source>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_mreq_source))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ip_mreq_source>())).imr_multiaddr as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq_source),
            "::",
            stringify!(imr_multiaddr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ip_mreq_source>())).imr_interface as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq_source),
            "::",
            stringify!(imr_interface)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ip_mreq_source>())).imr_sourceaddr
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq_source),
            "::",
            stringify!(imr_sourceaddr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ipv6_mreq {
    pub ipv6mr_multiaddr: in6_addr,
    pub ipv6mr_interface: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_ipv6_mreq() {
    assert_eq!(
        ::std::mem::size_of::<ipv6_mreq>(),
        20usize,
        concat!("Size of: ", stringify!(ipv6_mreq))
    );
    assert_eq!(
        ::std::mem::align_of::<ipv6_mreq>(),
        4usize,
        concat!("Alignment of ", stringify!(ipv6_mreq))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ipv6_mreq>())).ipv6mr_multiaddr as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipv6_mreq),
            "::",
            stringify!(ipv6mr_multiaddr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ipv6_mreq>())).ipv6mr_interface as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ipv6_mreq),
            "::",
            stringify!(ipv6mr_interface)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct group_req {
    pub gr_interface: u32,
    pub gr_group: sockaddr_storage,
}
#[test]
fn bindgen_test_layout_group_req() {
    assert_eq!(
        ::std::mem::size_of::<group_req>(),
        136usize,
        concat!("Size of: ", stringify!(group_req))
    );
    assert_eq!(
        ::std::mem::align_of::<group_req>(),
        8usize,
        concat!("Alignment of ", stringify!(group_req))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<group_req>())).gr_interface as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(group_req),
            "::",
            stringify!(gr_interface)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<group_req>())).gr_group as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(group_req),
            "::",
            stringify!(gr_group)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct group_source_req {
    pub gsr_interface: u32,
    pub gsr_group: sockaddr_storage,
    pub gsr_source: sockaddr_storage,
}
#[test]
fn bindgen_test_layout_group_source_req() {
    assert_eq!(
        ::std::mem::size_of::<group_source_req>(),
        264usize,
        concat!("Size of: ", stringify!(group_source_req))
    );
    assert_eq!(
        ::std::mem::align_of::<group_source_req>(),
        8usize,
        concat!("Alignment of ", stringify!(group_source_req))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<group_source_req>())).gsr_interface
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(group_source_req),
            "::",
            stringify!(gsr_interface)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<group_source_req>())).gsr_group as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(group_source_req),
            "::",
            stringify!(gsr_group)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<group_source_req>())).gsr_source as *const _
                as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(group_source_req),
            "::",
            stringify!(gsr_source)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_msfilter {
    pub imsf_multiaddr: in_addr,
    pub imsf_interface: in_addr,
    pub imsf_fmode: u32,
    pub imsf_numsrc: u32,
    pub imsf_slist: [in_addr; 1usize],
}
#[test]
fn bindgen_test_layout_ip_msfilter() {
    assert_eq!(
        ::std::mem::size_of::<ip_msfilter>(),
        20usize,
        concat!("Size of: ", stringify!(ip_msfilter))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_msfilter>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_msfilter))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ip_msfilter>())).imsf_multiaddr as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_multiaddr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ip_msfilter>())).imsf_interface as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_interface)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ip_msfilter>())).imsf_fmode as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_fmode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ip_msfilter>())).imsf_numsrc as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_numsrc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ip_msfilter>())).imsf_slist as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_slist)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct group_filter {
    pub gf_interface: u32,
    pub gf_group: sockaddr_storage,
    pub gf_fmode: u32,
    pub gf_numsrc: u32,
    pub gf_slist: [sockaddr_storage; 1usize],
}
#[test]
fn bindgen_test_layout_group_filter() {
    assert_eq!(
        ::std::mem::size_of::<group_filter>(),
        272usize,
        concat!("Size of: ", stringify!(group_filter))
    );
    assert_eq!(
        ::std::mem::align_of::<group_filter>(),
        8usize,
        concat!("Alignment of ", stringify!(group_filter))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<group_filter>())).gf_interface as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_interface)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<group_filter>())).gf_group as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_group)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<group_filter>())).gf_fmode as *const _
                as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_fmode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<group_filter>())).gf_numsrc as *const _
                as usize
        },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_numsrc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<group_filter>())).gf_slist as *const _
                as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_slist)
        )
    );
}
extern "C" {
    pub fn ntohl(__netlong: u32) -> u32;
}
extern "C" {
    pub fn ntohs(__netshort: u16) -> u16;
}
extern "C" {
    pub fn htonl(__hostlong: u32) -> u32;
}
extern "C" {
    pub fn htons(__hostshort: u16) -> u16;
}
extern "C" {
    pub fn bindresvport(
        __sockfd: ::std::os::raw::c_int,
        __sock_in: *mut sockaddr_in,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bindresvport6(
        __sockfd: ::std::os::raw::c_int,
        __sock_in: *mut sockaddr_in6,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet_addr(__cp: *const ::std::os::raw::c_char) -> in_addr_t;
}
extern "C" {
    pub fn inet_lnaof(__in: in_addr) -> in_addr_t;
}
extern "C" {
    pub fn inet_makeaddr(__net: in_addr_t, __host: in_addr_t) -> in_addr;
}
extern "C" {
    pub fn inet_netof(__in: in_addr) -> in_addr_t;
}
extern "C" {
    pub fn inet_network(__cp: *const ::std::os::raw::c_char) -> in_addr_t;
}
extern "C" {
    pub fn inet_ntoa(__in: in_addr) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn inet_pton(
        __af: ::std::os::raw::c_int,
        __cp: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet_ntop(
        __af: ::std::os::raw::c_int,
        __cp: *const ::std::os::raw::c_void,
        __buf: *mut ::std::os::raw::c_char,
        __len: socklen_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn inet_aton(
        __cp: *const ::std::os::raw::c_char,
        __inp: *mut in_addr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet_neta(
        __net: in_addr_t,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn inet_net_ntop(
        __af: ::std::os::raw::c_int,
        __cp: *const ::std::os::raw::c_void,
        __bits: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn inet_net_pton(
        __af: ::std::os::raw::c_int,
        __cp: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_void,
        __len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet_nsap_addr(
        __cp: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_uchar,
        __len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn inet_nsap_ntoa(
        __len: ::std::os::raw::c_int,
        __cp: *const ::std::os::raw::c_uchar,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn readv(
        __fd: ::std::os::raw::c_int,
        __iovec: *const iovec,
        __count: ::std::os::raw::c_int,
    ) -> ssize_t;
}
extern "C" {
    pub fn writev(
        __fd: ::std::os::raw::c_int,
        __iovec: *const iovec,
        __count: ::std::os::raw::c_int,
    ) -> ssize_t;
}
extern "C" {
    pub fn preadv(
        __fd: ::std::os::raw::c_int,
        __iovec: *const iovec,
        __count: ::std::os::raw::c_int,
        __offset: __off_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn pwritev(
        __fd: ::std::os::raw::c_int,
        __iovec: *const iovec,
        __count: ::std::os::raw::c_int,
        __offset: __off_t,
    ) -> ssize_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timezone {
    pub tz_minuteswest: ::std::os::raw::c_int,
    pub tz_dsttime: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_timezone() {
    assert_eq!(
        ::std::mem::size_of::<timezone>(),
        8usize,
        concat!("Size of: ", stringify!(timezone))
    );
    assert_eq!(
        ::std::mem::align_of::<timezone>(),
        4usize,
        concat!("Alignment of ", stringify!(timezone))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<timezone>())).tz_minuteswest as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timezone),
            "::",
            stringify!(tz_minuteswest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<timezone>())).tz_dsttime as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(timezone),
            "::",
            stringify!(tz_dsttime)
        )
    );
}
extern "C" {
    pub fn gettimeofday(
        __tv: *mut timeval,
        __tz: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn settimeofday(
        __tv: *const timeval,
        __tz: *const timezone,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn adjtime(
        __delta: *const timeval,
        __olddelta: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
pub const __itimer_which_ITIMER_REAL: __itimer_which = 0;
pub const __itimer_which_ITIMER_VIRTUAL: __itimer_which = 1;
pub const __itimer_which_ITIMER_PROF: __itimer_which = 2;
pub type __itimer_which = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerval {
    pub it_interval: timeval,
    pub it_value: timeval,
}
#[test]
fn bindgen_test_layout_itimerval() {
    assert_eq!(
        ::std::mem::size_of::<itimerval>(),
        32usize,
        concat!("Size of: ", stringify!(itimerval))
    );
    assert_eq!(
        ::std::mem::align_of::<itimerval>(),
        8usize,
        concat!("Alignment of ", stringify!(itimerval))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<itimerval>())).it_interval as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerval),
            "::",
            stringify!(it_interval)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<itimerval>())).it_value as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerval),
            "::",
            stringify!(it_value)
        )
    );
}
pub type __itimer_which_t = ::std::os::raw::c_int;
extern "C" {
    pub fn getitimer(
        __which: __itimer_which_t,
        __value: *mut itimerval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setitimer(
        __which: __itimer_which_t,
        __new: *const itimerval,
        __old: *mut itimerval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utimes(
        __file: *const ::std::os::raw::c_char,
        __tvp: *const timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lutimes(
        __file: *const ::std::os::raw::c_char,
        __tvp: *const timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn futimes(
        __fd: ::std::os::raw::c_int,
        __tvp: *const timeval,
    ) -> ::std::os::raw::c_int;
}
pub type os_time_t = ::std::os::raw::c_long;
extern "C" {
    #[doc = " os_sleep - Sleep (sec, usec)"]
    #[doc = " @sec: Number of seconds to sleep"]
    #[doc = " @usec: Number of microseconds to sleep"]
    pub fn os_sleep(sec: os_time_t, usec: os_time_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct os_time {
    pub sec: os_time_t,
    pub usec: os_time_t,
}
#[test]
fn bindgen_test_layout_os_time() {
    assert_eq!(
        ::std::mem::size_of::<os_time>(),
        16usize,
        concat!("Size of: ", stringify!(os_time))
    );
    assert_eq!(
        ::std::mem::align_of::<os_time>(),
        8usize,
        concat!("Alignment of ", stringify!(os_time))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<os_time>())).sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(os_time),
            "::",
            stringify!(sec)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<os_time>())).usec as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(os_time),
            "::",
            stringify!(usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct os_reltime {
    pub sec: os_time_t,
    pub usec: os_time_t,
}
#[test]
fn bindgen_test_layout_os_reltime() {
    assert_eq!(
        ::std::mem::size_of::<os_reltime>(),
        16usize,
        concat!("Size of: ", stringify!(os_reltime))
    );
    assert_eq!(
        ::std::mem::align_of::<os_reltime>(),
        8usize,
        concat!("Alignment of ", stringify!(os_reltime))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<os_reltime>())).sec as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(os_reltime),
            "::",
            stringify!(sec)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<os_reltime>())).usec as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(os_reltime),
            "::",
            stringify!(usec)
        )
    );
}
extern "C" {
    #[doc = " os_get_time - Get current time (sec, usec)"]
    #[doc = " @t: Pointer to buffer for the time"]
    #[doc = " Returns: 0 on success, -1 on failure"]
    pub fn os_get_time(t: *mut os_time) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " os_get_reltime - Get relative time (sec, usec)"]
    #[doc = " @t: Pointer to buffer for the time"]
    #[doc = " Returns: 0 on success, -1 on failure"]
    pub fn os_get_reltime(t: *mut os_reltime) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " os_mktime - Convert broken-down time into seconds since 1970-01-01"]
    #[doc = " @year: Four digit year"]
    #[doc = " @month: Month (1 .. 12)"]
    #[doc = " @day: Day of month (1 .. 31)"]
    #[doc = " @hour: Hour (0 .. 23)"]
    #[doc = " @min: Minute (0 .. 59)"]
    #[doc = " @sec: Second (0 .. 60)"]
    #[doc = " @t: Buffer for returning calendar time representation (seconds since"]
    #[doc = " 1970-01-01 00:00:00)"]
    #[doc = " Returns: 0 on success, -1 on failure"]
    #[doc = ""]
    #[doc = " Note: The result is in seconds from Epoch, i.e., in UTC, not in local time"]
    #[doc = " which is used by POSIX mktime()."]
    pub fn os_mktime(
        year: ::std::os::raw::c_int,
        month: ::std::os::raw::c_int,
        day: ::std::os::raw::c_int,
        hour: ::std::os::raw::c_int,
        min: ::std::os::raw::c_int,
        sec: ::std::os::raw::c_int,
        t: *mut os_time_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct os_tm {
    pub sec: ::std::os::raw::c_int,
    pub min: ::std::os::raw::c_int,
    pub hour: ::std::os::raw::c_int,
    pub day: ::std::os::raw::c_int,
    pub month: ::std::os::raw::c_int,
    pub year: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_os_tm() {
    assert_eq!(
        ::std::mem::size_of::<os_tm>(),
        24usize,
        concat!("Size of: ", stringify!(os_tm))
    );
    assert_eq!(
        ::std::mem::align_of::<os_tm>(),
        4usize,
        concat!("Alignment of ", stringify!(os_tm))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<os_tm>())).sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(os_tm),
            "::",
            stringify!(sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<os_tm>())).min as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(os_tm),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<os_tm>())).hour as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(os_tm),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<os_tm>())).day as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(os_tm),
            "::",
            stringify!(day)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<os_tm>())).month as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(os_tm),
            "::",
            stringify!(month)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<os_tm>())).year as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(os_tm),
            "::",
            stringify!(year)
        )
    );
}
extern "C" {
    pub fn os_gmtime(t: os_time_t, tm: *mut os_tm) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " os_daemonize - Run in the background (detach from the controlling terminal)"]
    #[doc = " @pid_file: File name to write the process ID to or %NULL to skip this"]
    #[doc = " Returns: 0 on success, -1 on failure"]
    pub fn os_daemonize(
        pid_file: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " os_daemonize_terminate - Stop running in the background (remove pid file)"]
    #[doc = " @pid_file: File name to write the process ID to or %NULL to skip this"]
    pub fn os_daemonize_terminate(pid_file: *const ::std::os::raw::c_char);
}
extern "C" {
    #[doc = " os_get_random - Get cryptographically strong pseudo random data"]
    #[doc = " @buf: Buffer for pseudo random data"]
    #[doc = " @len: Length of the buffer"]
    #[doc = " Returns: 0 on success, -1 on failure"]
    pub fn os_get_random(
        buf: *mut ::std::os::raw::c_uchar,
        len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " os_random - Get pseudo random value (not necessarily very strong)"]
    #[doc = " Returns: Pseudo random value"]
    pub fn os_random() -> ::std::os::raw::c_ulong;
}
extern "C" {
    #[doc = " os_rel2abs_path - Get an absolute path for a file"]
    #[doc = " @rel_path: Relative path to a file"]
    #[doc = " Returns: Absolute path for the file or %NULL on failure"]
    #[doc = ""]
    #[doc = " This function tries to convert a relative path of a file to an absolute path"]
    #[doc = " in order for the file to be found even if current working directory has"]
    #[doc = " changed. The returned value is allocated and caller is responsible for"]
    #[doc = " freeing it. It is acceptable to just return the same path in an allocated"]
    #[doc = " buffer, e.g., return strdup(rel_path). This function is only used to find"]
    #[doc = " configuration files when os_daemonize() may have changed the current working"]
    #[doc = " directory and relative path would be pointing to a different location."]
    pub fn os_rel2abs_path(
        rel_path: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " os_program_init - Program initialization (called at start)"]
    #[doc = " Returns: 0 on success, -1 on failure"]
    #[doc = ""]
    #[doc = " This function is called when a programs starts. If there are any OS specific"]
    #[doc = " processing that is needed, it can be placed here. It is also acceptable to"]
    #[doc = " just return 0 if not special processing is needed."]
    pub fn os_program_init() -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " os_program_deinit - Program deinitialization (called just before exit)"]
    #[doc = ""]
    #[doc = " This function is called just before a program exists. If there are any OS"]
    #[doc = " specific processing, e.g., freeing resourced allocated in os_program_init(),"]
    #[doc = " it should be done here. It is also acceptable for this function to do"]
    #[doc = " nothing."]
    pub fn os_program_deinit();
}
extern "C" {
    #[doc = " os_setenv - Set environment variable"]
    #[doc = " @name: Name of the variable"]
    #[doc = " @value: Value to set to the variable"]
    #[doc = " @overwrite: Whether existing variable should be overwritten"]
    #[doc = " Returns: 0 on success, -1 on error"]
    #[doc = ""]
    #[doc = " This function is only used for wpa_cli action scripts. OS wrapper does not"]
    #[doc = " need to implement this if such functionality is not needed."]
    pub fn os_setenv(
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
        overwrite: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " os_unsetenv - Delete environent variable"]
    #[doc = " @name: Name of the variable"]
    #[doc = " Returns: 0 on success, -1 on error"]
    #[doc = ""]
    #[doc = " This function is only used for wpa_cli action scripts. OS wrapper does not"]
    #[doc = " need to implement this if such functionality is not needed."]
    pub fn os_unsetenv(
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " os_readfile - Read a file to an allocated memory buffer"]
    #[doc = " @name: Name of the file to read"]
    #[doc = " @len: For returning the length of the allocated buffer"]
    #[doc = " Returns: Pointer to the allocated buffer or %NULL on failure"]
    #[doc = ""]
    #[doc = " This function allocates memory and reads the given file to this buffer. Both"]
    #[doc = " binary and text files can be read with this function. The caller is"]
    #[doc = " responsible for freeing the returned buffer with os_free()."]
    pub fn os_readfile(
        name: *const ::std::os::raw::c_char,
        len: *mut size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " os_file_exists - Check whether the specified file exists"]
    #[doc = " @fname: Path and name of the file"]
    #[doc = " Returns: 1 if the file exists or 0 if not"]
    pub fn os_file_exists(
        fname: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " os_fdatasync - Sync a file's (for a given stream) state with storage device"]
    #[doc = " @stream: the stream to be flushed"]
    #[doc = " Returns: 0 if the operation succeeded or -1 on failure"]
    pub fn os_fdatasync(stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " os_zalloc - Allocate and zero memory"]
    #[doc = " @size: Number of bytes to allocate"]
    #[doc = " Returns: Pointer to allocated and zeroed memory or %NULL on failure"]
    #[doc = ""]
    #[doc = " Caller is responsible for freeing the returned buffer with os_free()."]
    pub fn os_zalloc(size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = " os_strlcpy - Copy a string with size bound and NUL-termination"]
    #[doc = " @dest: Destination"]
    #[doc = " @src: Source"]
    #[doc = " @siz: Size of the target buffer"]
    #[doc = " Returns: Total length of the target string (length of src) (not including"]
    #[doc = " NUL-termination)"]
    #[doc = ""]
    #[doc = " This function matches in behavior with the strlcpy(3) function in OpenBSD."]
    pub fn os_strlcpy(
        dest: *mut ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
        siz: size_t,
    ) -> size_t;
}
extern "C" {
    #[doc = " os_memcmp_const - Constant time memory comparison"]
    #[doc = " @a: First buffer to compare"]
    #[doc = " @b: Second buffer to compare"]
    #[doc = " @len: Number of octets to compare"]
    #[doc = " Returns: 0 if buffers are equal, non-zero if not"]
    #[doc = ""]
    #[doc = " This function is meant for comparing passwords or hash values where"]
    #[doc = " difference in execution time could provide external observer information"]
    #[doc = " about the location of the difference in the memory buffers. The return value"]
    #[doc = " does not behave like os_memcmp(), i.e., os_memcmp_const() cannot be used to"]
    #[doc = " sort items into a defined order. Unlike os_memcmp(), execution time of"]
    #[doc = " os_memcmp_const() does not depend on the contents of the compared memory"]
    #[doc = " buffers, but only on the total compared length."]
    pub fn os_memcmp_const(
        a: *const ::std::os::raw::c_void,
        b: *const ::std::os::raw::c_void,
        len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " os_memdup - Allocate duplicate of passed memory chunk"]
    #[doc = " @src: Source buffer to duplicate"]
    #[doc = " @len: Length of source buffer"]
    #[doc = " Returns: %NULL if allocation failed, copy of src buffer otherwise"]
    #[doc = ""]
    #[doc = " This function allocates a memory block like os_malloc() would, and"]
    #[doc = " copies the given source buffer into it."]
    pub fn os_memdup(
        src: *const ::std::os::raw::c_void,
        len: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = " os_exec - Execute an external program"]
    #[doc = " @program: Path to the program"]
    #[doc = " @arg: Command line argument string"]
    #[doc = " @wait_completion: Whether to wait until the program execution completes"]
    #[doc = " Returns: 0 on success, -1 on error"]
    pub fn os_exec(
        program: *const ::std::os::raw::c_char,
        arg: *const ::std::os::raw::c_char,
        wait_completion: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type u64_ = u64;
pub type u32_ = u32;
pub type u16_ = u16;
pub type u8_ = u8;
pub type s64 = i64;
pub type s32 = i32;
pub type s16 = i16;
pub type s8 = i8;
pub type be16 = u16_;
pub type le16 = u16_;
pub type be32 = u32_;
pub type le32 = u32_;
pub type be64 = u64_;
pub type le64 = u64_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wpa_ssid_value {
    pub ssid: [u8_; 32usize],
    pub ssid_len: size_t,
}
#[test]
fn bindgen_test_layout_wpa_ssid_value() {
    assert_eq!(
        ::std::mem::size_of::<wpa_ssid_value>(),
        40usize,
        concat!("Size of: ", stringify!(wpa_ssid_value))
    );
    assert_eq!(
        ::std::mem::align_of::<wpa_ssid_value>(),
        8usize,
        concat!("Alignment of ", stringify!(wpa_ssid_value))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<wpa_ssid_value>())).ssid as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wpa_ssid_value),
            "::",
            stringify!(ssid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<wpa_ssid_value>())).ssid_len as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(wpa_ssid_value),
            "::",
            stringify!(ssid_len)
        )
    );
}
extern "C" {
    pub fn hwaddr_aton(
        txt: *const ::std::os::raw::c_char,
        addr: *mut u8_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hwaddr_masked_aton(
        txt: *const ::std::os::raw::c_char,
        addr: *mut u8_,
        mask: *mut u8_,
        maskable: u8_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hwaddr_compact_aton(
        txt: *const ::std::os::raw::c_char,
        addr: *mut u8_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hwaddr_aton2(
        txt: *const ::std::os::raw::c_char,
        addr: *mut u8_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hex2byte(
        hex: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hexstr2bin(
        hex: *const ::std::os::raw::c_char,
        buf: *mut u8_,
        len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inc_byte_array(counter: *mut u8_, len: size_t);
}
extern "C" {
    pub fn buf_shift_right(buf: *mut u8_, len: size_t, bits: size_t);
}
extern "C" {
    pub fn wpa_get_ntp_timestamp(buf: *mut u8_);
}
extern "C" {
    pub fn wpa_scnprintf(
        buf: *mut ::std::os::raw::c_char,
        size: size_t,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wpa_snprintf_hex_sep(
        buf: *mut ::std::os::raw::c_char,
        buf_size: size_t,
        data: *const u8_,
        len: size_t,
        sep: ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wpa_snprintf_hex(
        buf: *mut ::std::os::raw::c_char,
        buf_size: size_t,
        data: *const u8_,
        len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wpa_snprintf_hex_uppercase(
        buf: *mut ::std::os::raw::c_char,
        buf_size: size_t,
        data: *const u8_,
        len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hwaddr_mask_txt(
        buf: *mut ::std::os::raw::c_char,
        len: size_t,
        addr: *const u8_,
        mask: *const u8_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ssid_parse(
        buf: *const ::std::os::raw::c_char,
        ssid: *mut wpa_ssid_value,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf_encode(
        txt: *mut ::std::os::raw::c_char,
        maxlen: size_t,
        data: *const u8_,
        len: size_t,
    );
}
extern "C" {
    pub fn printf_decode(
        buf: *mut u8_,
        maxlen: size_t,
        str_: *const ::std::os::raw::c_char,
    ) -> size_t;
}
extern "C" {
    pub fn wpa_ssid_txt(
        ssid: *const u8_,
        ssid_len: size_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn wpa_config_parse_string(
        value: *const ::std::os::raw::c_char,
        len: *mut size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn is_hex(data: *const u8_, len: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn has_ctrl_char(
        data: *const u8_,
        len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn has_newline(
        str_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn merge_byte_arrays(
        res: *mut u8_,
        res_len: size_t,
        src1: *const u8_,
        src1_len: size_t,
        src2: *const u8_,
        src2_len: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn dup_binstr(
        src: *const ::std::os::raw::c_void,
        len: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wpabuf {
    pub size: size_t,
    pub used: size_t,
    pub buf: *mut u8_,
    pub flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_wpabuf() {
    assert_eq!(
        ::std::mem::size_of::<wpabuf>(),
        32usize,
        concat!("Size of: ", stringify!(wpabuf))
    );
    assert_eq!(
        ::std::mem::align_of::<wpabuf>(),
        8usize,
        concat!("Alignment of ", stringify!(wpabuf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wpabuf>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wpabuf),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wpabuf>())).used as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wpabuf),
            "::",
            stringify!(used)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wpabuf>())).buf as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(wpabuf),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<wpabuf>())).flags as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(wpabuf),
            "::",
            stringify!(flags)
        )
    );
}
extern "C" {
    pub fn wpabuf_resize(
        buf: *mut *mut wpabuf,
        add_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wpabuf_alloc(len: size_t) -> *mut wpabuf;
}
extern "C" {
    pub fn wpabuf_alloc_ext_data(data: *mut u8_, len: size_t) -> *mut wpabuf;
}
extern "C" {
    pub fn wpabuf_alloc_copy(
        data: *const ::std::os::raw::c_void,
        len: size_t,
    ) -> *mut wpabuf;
}
extern "C" {
    pub fn wpabuf_dup(src: *const wpabuf) -> *mut wpabuf;
}
extern "C" {
    pub fn wpabuf_free(buf: *mut wpabuf);
}
extern "C" {
    pub fn wpabuf_clear_free(buf: *mut wpabuf);
}
extern "C" {
    pub fn wpabuf_put(
        buf: *mut wpabuf,
        len: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn wpabuf_concat(a: *mut wpabuf, b: *mut wpabuf) -> *mut wpabuf;
}
extern "C" {
    pub fn wpabuf_zeropad(buf: *mut wpabuf, len: size_t) -> *mut wpabuf;
}
extern "C" {
    pub fn wpabuf_printf(
        buf: *mut wpabuf,
        fmt: *mut ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn wpabuf_parse_bin(buf: *const ::std::os::raw::c_char) -> *mut wpabuf;
}
extern "C" {
    pub static mut wpa_debug_level: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut wpa_debug_show_keys: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut wpa_debug_timestamp: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut wpa_debug_syslog: ::std::os::raw::c_int;
}
pub const MSG_EXCESSIVE: _bindgen_ty_20 = 0;
pub const MSG_MSGDUMP: _bindgen_ty_20 = 1;
pub const MSG_DEBUG: _bindgen_ty_20 = 2;
pub const MSG_INFO: _bindgen_ty_20 = 3;
pub const MSG_WARNING: _bindgen_ty_20 = 4;
pub const MSG_ERROR: _bindgen_ty_20 = 5;
pub type _bindgen_ty_20 = u32;
extern "C" {
    pub fn wpa_debug_open_file(
        path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wpa_debug_reopen_file() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wpa_debug_close_file();
}
extern "C" {
    pub fn wpa_debug_setup_stdout();
}
extern "C" {
    #[doc = " wpa_debug_printf_timestamp - Print timestamp for debug output"]
    #[doc = ""]
    #[doc = " This function prints a timestamp in seconds_from_1970.microsoconds"]
    #[doc = " format if debug output has been configured to include timestamps in debug"]
    #[doc = " messages."]
    pub fn wpa_debug_print_timestamp();
}
extern "C" {
    #[doc = " wpa_printf - conditional printf"]
    #[doc = " @level: priority level (MSG_*) of the message"]
    #[doc = " @fmt: printf format string, followed by optional arguments"]
    #[doc = ""]
    #[doc = " This function is used to print conditional debugging and error messages. The"]
    #[doc = " output may be directed to stdout, stderr, and/or syslog based on"]
    #[doc = " configuration."]
    #[doc = ""]
    #[doc = " Note: New line '\\n' is added to the end of the text when printing to stdout."]
    pub fn wpa_printf(
        level: ::std::os::raw::c_int,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    #[doc = " wpa_hexdump - conditional hex dump"]
    #[doc = " @level: priority level (MSG_*) of the message"]
    #[doc = " @title: title of for the message"]
    #[doc = " @buf: data buffer to be dumped"]
    #[doc = " @len: length of the buf"]
    #[doc = ""]
    #[doc = " This function is used to print conditional debugging and error messages. The"]
    #[doc = " output may be directed to stdout, stderr, and/or syslog based on"]
    #[doc = " configuration. The contents of buf is printed out has hex dump."]
    pub fn wpa_hexdump(
        level: ::std::os::raw::c_int,
        title: *const ::std::os::raw::c_char,
        buf: *const ::std::os::raw::c_void,
        len: size_t,
    );
}
extern "C" {
    #[doc = " wpa_hexdump_key - conditional hex dump, hide keys"]
    #[doc = " @level: priority level (MSG_*) of the message"]
    #[doc = " @title: title of for the message"]
    #[doc = " @buf: data buffer to be dumped"]
    #[doc = " @len: length of the buf"]
    #[doc = ""]
    #[doc = " This function is used to print conditional debugging and error messages. The"]
    #[doc = " output may be directed to stdout, stderr, and/or syslog based on"]
    #[doc = " configuration. The contents of buf is printed out has hex dump. This works"]
    #[doc = " like wpa_hexdump(), but by default, does not include secret keys (passwords,"]
    #[doc = " etc.) in debug output."]
    pub fn wpa_hexdump_key(
        level: ::std::os::raw::c_int,
        title: *const ::std::os::raw::c_char,
        buf: *const ::std::os::raw::c_void,
        len: size_t,
    );
}
extern "C" {
    #[doc = " wpa_hexdump_ascii - conditional hex dump"]
    #[doc = " @level: priority level (MSG_*) of the message"]
    #[doc = " @title: title of for the message"]
    #[doc = " @buf: data buffer to be dumped"]
    #[doc = " @len: length of the buf"]
    #[doc = ""]
    #[doc = " This function is used to print conditional debugging and error messages. The"]
    #[doc = " output may be directed to stdout, stderr, and/or syslog based on"]
    #[doc = " configuration. The contents of buf is printed out has hex dump with both"]
    #[doc = " the hex numbers and ASCII characters (for printable range) are shown. 16"]
    #[doc = " bytes per line will be shown."]
    pub fn wpa_hexdump_ascii(
        level: ::std::os::raw::c_int,
        title: *const ::std::os::raw::c_char,
        buf: *const ::std::os::raw::c_void,
        len: size_t,
    );
}
extern "C" {
    #[doc = " wpa_hexdump_ascii_key - conditional hex dump, hide keys"]
    #[doc = " @level: priority level (MSG_*) of the message"]
    #[doc = " @title: title of for the message"]
    #[doc = " @buf: data buffer to be dumped"]
    #[doc = " @len: length of the buf"]
    #[doc = ""]
    #[doc = " This function is used to print conditional debugging and error messages. The"]
    #[doc = " output may be directed to stdout, stderr, and/or syslog based on"]
    #[doc = " configuration. The contents of buf is printed out has hex dump with both"]
    #[doc = " the hex numbers and ASCII characters (for printable range) are shown. 16"]
    #[doc = " bytes per line will be shown. This works like wpa_hexdump_ascii(), but by"]
    #[doc = " default, does not include secret keys (passwords, etc.) in debug output."]
    pub fn wpa_hexdump_ascii_key(
        level: ::std::os::raw::c_int,
        title: *const ::std::os::raw::c_char,
        buf: *const ::std::os::raw::c_void,
        len: size_t,
    );
}
extern "C" {
    #[doc = " wpa_msg - Conditional printf for default target and ctrl_iface monitors"]
    #[doc = " @ctx: Pointer to context data; this is the ctx variable registered"]
    #[doc = "\twith struct wpa_driver_ops::init()"]
    #[doc = " @level: priority level (MSG_*) of the message"]
    #[doc = " @fmt: printf format string, followed by optional arguments"]
    #[doc = ""]
    #[doc = " This function is used to print conditional debugging and error messages. The"]
    #[doc = " output may be directed to stdout, stderr, and/or syslog based on"]
    #[doc = " configuration. This function is like wpa_printf(), but it also sends the"]
    #[doc = " same message to all attached ctrl_iface monitors."]
    #[doc = ""]
    #[doc = " Note: New line '\\n' is added to the end of the text when printing to stdout."]
    pub fn wpa_msg(
        ctx: *mut ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    #[doc = " wpa_msg_ctrl - Conditional printf for ctrl_iface monitors"]
    #[doc = " @ctx: Pointer to context data; this is the ctx variable registered"]
    #[doc = "\twith struct wpa_driver_ops::init()"]
    #[doc = " @level: priority level (MSG_*) of the message"]
    #[doc = " @fmt: printf format string, followed by optional arguments"]
    #[doc = ""]
    #[doc = " This function is used to print conditional debugging and error messages."]
    #[doc = " This function is like wpa_msg(), but it sends the output only to the"]
    #[doc = " attached ctrl_iface monitors. In other words, it can be used for frequent"]
    #[doc = " events that do not need to be sent to syslog."]
    pub fn wpa_msg_ctrl(
        ctx: *mut ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    #[doc = " wpa_msg_global - Global printf for ctrl_iface monitors"]
    #[doc = " @ctx: Pointer to context data; this is the ctx variable registered"]
    #[doc = "\twith struct wpa_driver_ops::init()"]
    #[doc = " @level: priority level (MSG_*) of the message"]
    #[doc = " @fmt: printf format string, followed by optional arguments"]
    #[doc = ""]
    #[doc = " This function is used to print conditional debugging and error messages."]
    #[doc = " This function is like wpa_msg(), but it sends the output as a global event,"]
    #[doc = " i.e., without being specific to an interface. For backwards compatibility,"]
    #[doc = " an old style event is also delivered on one of the interfaces (the one"]
    #[doc = " specified by the context data)."]
    pub fn wpa_msg_global(
        ctx: *mut ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    #[doc = " wpa_msg_global_ctrl - Conditional global printf for ctrl_iface monitors"]
    #[doc = " @ctx: Pointer to context data; this is the ctx variable registered"]
    #[doc = "\twith struct wpa_driver_ops::init()"]
    #[doc = " @level: priority level (MSG_*) of the message"]
    #[doc = " @fmt: printf format string, followed by optional arguments"]
    #[doc = ""]
    #[doc = " This function is used to print conditional debugging and error messages."]
    #[doc = " This function is like wpa_msg_global(), but it sends the output only to the"]
    #[doc = " attached global ctrl_iface monitors. In other words, it can be used for"]
    #[doc = " frequent events that do not need to be sent to syslog."]
    pub fn wpa_msg_global_ctrl(
        ctx: *mut ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    #[doc = " wpa_msg_no_global - Conditional printf for ctrl_iface monitors"]
    #[doc = " @ctx: Pointer to context data; this is the ctx variable registered"]
    #[doc = "\twith struct wpa_driver_ops::init()"]
    #[doc = " @level: priority level (MSG_*) of the message"]
    #[doc = " @fmt: printf format string, followed by optional arguments"]
    #[doc = ""]
    #[doc = " This function is used to print conditional debugging and error messages."]
    #[doc = " This function is like wpa_msg(), but it does not send the output as a global"]
    #[doc = " event."]
    pub fn wpa_msg_no_global(
        ctx: *mut ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    #[doc = " wpa_msg_global_only - Conditional printf for ctrl_iface monitors"]
    #[doc = " @ctx: Pointer to context data; this is the ctx variable registered"]
    #[doc = "\twith struct wpa_driver_ops::init()"]
    #[doc = " @level: priority level (MSG_*) of the message"]
    #[doc = " @fmt: printf format string, followed by optional arguments"]
    #[doc = ""]
    #[doc = " This function is used to print conditional debugging and error messages."]
    #[doc = " This function is like wpa_msg_global(), but it sends the output only as a"]
    #[doc = " global event."]
    pub fn wpa_msg_global_only(
        ctx: *mut ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
pub const wpa_msg_type_WPA_MSG_PER_INTERFACE: wpa_msg_type = 0;
pub const wpa_msg_type_WPA_MSG_GLOBAL: wpa_msg_type = 1;
pub const wpa_msg_type_WPA_MSG_NO_GLOBAL: wpa_msg_type = 2;
pub const wpa_msg_type_WPA_MSG_ONLY_GLOBAL: wpa_msg_type = 3;
pub type wpa_msg_type = u32;
pub type wpa_msg_cb_func = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        type_: wpa_msg_type,
        txt: *const ::std::os::raw::c_char,
        len: size_t,
    ),
>;
extern "C" {
    #[doc = " wpa_msg_register_cb - Register callback function for wpa_msg() messages"]
    #[doc = " @func: Callback function (%NULL to unregister)"]
    pub fn wpa_msg_register_cb(func: wpa_msg_cb_func);
}
pub type wpa_msg_get_ifname_func = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char,
>;
extern "C" {
    pub fn wpa_msg_register_ifname_cb(func: wpa_msg_get_ifname_func);
}
extern "C" {
    pub fn hostapd_logger(
        ctx: *mut ::std::os::raw::c_void,
        addr: *const u8_,
        module: ::std::os::raw::c_uint,
        level: ::std::os::raw::c_int,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
pub type hostapd_logger_cb_func = ::std::option::Option<
    unsafe extern "C" fn(
        ctx: *mut ::std::os::raw::c_void,
        addr: *const u8_,
        module: ::std::os::raw::c_uint,
        level: ::std::os::raw::c_int,
        txt: *const ::std::os::raw::c_char,
        len: size_t,
    ),
>;
extern "C" {
    #[doc = " hostapd_logger_register_cb - Register callback function for hostapd_logger()"]
    #[doc = " @func: Callback function (%NULL to unregister)"]
    pub fn hostapd_logger_register_cb(func: hostapd_logger_cb_func);
}
pub const hostapd_logger_level_HOSTAPD_LEVEL_DEBUG_VERBOSE:
    hostapd_logger_level = 0;
pub const hostapd_logger_level_HOSTAPD_LEVEL_DEBUG: hostapd_logger_level = 1;
pub const hostapd_logger_level_HOSTAPD_LEVEL_INFO: hostapd_logger_level = 2;
pub const hostapd_logger_level_HOSTAPD_LEVEL_NOTICE: hostapd_logger_level = 3;
pub const hostapd_logger_level_HOSTAPD_LEVEL_WARNING: hostapd_logger_level = 4;
pub type hostapd_logger_level = u32;
extern "C" {
    pub fn debug_level_str(
        level: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn str_to_debug_level(
        s: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wpa_freq_range_list {
    pub range: *mut wpa_freq_range_list_wpa_freq_range,
    pub num: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wpa_freq_range_list_wpa_freq_range {
    pub min: ::std::os::raw::c_uint,
    pub max: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_wpa_freq_range_list_wpa_freq_range() {
    assert_eq!(
        ::std::mem::size_of::<wpa_freq_range_list_wpa_freq_range>(),
        8usize,
        concat!("Size of: ", stringify!(wpa_freq_range_list_wpa_freq_range))
    );
    assert_eq!(
        ::std::mem::align_of::<wpa_freq_range_list_wpa_freq_range>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(wpa_freq_range_list_wpa_freq_range)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<wpa_freq_range_list_wpa_freq_range>())).min
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wpa_freq_range_list_wpa_freq_range),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<wpa_freq_range_list_wpa_freq_range>())).max
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(wpa_freq_range_list_wpa_freq_range),
            "::",
            stringify!(max)
        )
    );
}
#[test]
fn bindgen_test_layout_wpa_freq_range_list() {
    assert_eq!(
        ::std::mem::size_of::<wpa_freq_range_list>(),
        16usize,
        concat!("Size of: ", stringify!(wpa_freq_range_list))
    );
    assert_eq!(
        ::std::mem::align_of::<wpa_freq_range_list>(),
        8usize,
        concat!("Alignment of ", stringify!(wpa_freq_range_list))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<wpa_freq_range_list>())).range as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wpa_freq_range_list),
            "::",
            stringify!(range)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<wpa_freq_range_list>())).num as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wpa_freq_range_list),
            "::",
            stringify!(num)
        )
    );
}
extern "C" {
    pub fn freq_range_list_parse(
        res: *mut wpa_freq_range_list,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freq_range_list_includes(
        list: *const wpa_freq_range_list,
        freq: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freq_range_list_str(
        list: *const wpa_freq_range_list,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn int_array_len(a: *const ::std::os::raw::c_int) -> size_t;
}
extern "C" {
    pub fn int_array_concat(
        res: *mut *mut ::std::os::raw::c_int,
        a: *const ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn int_array_sort_unique(a: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn int_array_add_unique(
        res: *mut *mut ::std::os::raw::c_int,
        a: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn str_clear_free(str_: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn bin_clear_free(bin: *mut ::std::os::raw::c_void, len: size_t);
}
extern "C" {
    pub fn random_mac_addr(addr: *mut u8_) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn random_mac_addr_keep_oui(addr: *mut u8_) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cstr_token(
        str_: *const ::std::os::raw::c_char,
        delim: *const ::std::os::raw::c_char,
        last: *mut *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn str_token(
        str_: *mut ::std::os::raw::c_char,
        delim: *const ::std::os::raw::c_char,
        context: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn utf8_escape(
        inp: *const ::std::os::raw::c_char,
        in_size: size_t,
        outp: *mut ::std::os::raw::c_char,
        out_size: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn utf8_unescape(
        inp: *const ::std::os::raw::c_char,
        in_size: size_t,
        outp: *mut ::std::os::raw::c_char,
        out_size: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn is_ctrl_char(c: ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn str_starts(
        str_: *const ::std::os::raw::c_char,
        start: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rssi_to_rcpi(rssi: ::std::os::raw::c_int) -> u8_;
}
extern "C" {
    pub fn get_param(
        cmd: *const ::std::os::raw::c_char,
        param: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn forced_memzero(ptr: *mut ::std::os::raw::c_void, len: size_t);
}
extern "C" {
    pub fn __hide_aliasing_typecast(
        foo: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn base64_encode(
        src: *const ::std::os::raw::c_void,
        len: size_t,
        out_len: *mut size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn base64_encode_no_lf(
        src: *const ::std::os::raw::c_void,
        len: size_t,
        out_len: *mut size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn base64_decode(
        src: *const ::std::os::raw::c_char,
        len: size_t,
        out_len: *mut size_t,
    ) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn base64_url_encode(
        src: *const ::std::os::raw::c_void,
        len: size_t,
        out_len: *mut size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn base64_url_decode(
        src: *const ::std::os::raw::c_char,
        len: size_t,
        out_len: *mut size_t,
    ) -> *mut ::std::os::raw::c_uchar;
}
pub const eloop_event_type_EVENT_TYPE_READ: eloop_event_type = 0;
pub const eloop_event_type_EVENT_TYPE_WRITE: eloop_event_type = 1;
pub const eloop_event_type_EVENT_TYPE_EXCEPTION: eloop_event_type = 2;
#[doc = " eloop_event_type - eloop socket event type for eloop_register_sock()"]
#[doc = " @EVENT_TYPE_READ: Socket has data available for reading"]
#[doc = " @EVENT_TYPE_WRITE: Socket has room for new data to be written"]
#[doc = " @EVENT_TYPE_EXCEPTION: An exception has been reported"]
pub type eloop_event_type = u32;
#[doc = " eloop_sock_handler - eloop socket event callback type"]
#[doc = " @sock: File descriptor number for the socket"]
#[doc = " @eloop_ctx: Registered callback context data (eloop_data)"]
#[doc = " @sock_ctx: Registered callback context data (user_data)"]
pub type eloop_sock_handler = ::std::option::Option<
    unsafe extern "C" fn(
        sock: ::std::os::raw::c_int,
        eloop_ctx: *mut ::std::os::raw::c_void,
        sock_ctx: *mut ::std::os::raw::c_void,
    ),
>;
#[doc = " eloop_event_handler - eloop generic event callback type"]
#[doc = " @eloop_ctx: Registered callback context data (eloop_data)"]
#[doc = " @user_ctx: Registered callback context data (user_data)"]
pub type eloop_event_handler = ::std::option::Option<
    unsafe extern "C" fn(
        eloop_ctx: *mut ::std::os::raw::c_void,
        user_ctx: *mut ::std::os::raw::c_void,
    ),
>;
#[doc = " eloop_timeout_handler - eloop timeout event callback type"]
#[doc = " @eloop_ctx: Registered callback context data (eloop_data)"]
#[doc = " @user_ctx: Registered callback context data (user_data)"]
pub type eloop_timeout_handler = ::std::option::Option<
    unsafe extern "C" fn(
        eloop_ctx: *mut ::std::os::raw::c_void,
        user_ctx: *mut ::std::os::raw::c_void,
    ),
>;
#[doc = " eloop_signal_handler - eloop signal event callback type"]
#[doc = " @sig: Signal number"]
#[doc = " @signal_ctx: Registered callback context data (user_data from"]
#[doc = " eloop_register_signal(), eloop_register_signal_terminate(), or"]
#[doc = " eloop_register_signal_reconfig() call)"]
pub type eloop_signal_handler = ::std::option::Option<
    unsafe extern "C" fn(
        sig: ::std::os::raw::c_int,
        signal_ctx: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    #[doc = " eloop_init() - Initialize global event loop data"]
    #[doc = " Returns: 0 on success, -1 on failure"]
    #[doc = ""]
    #[doc = " This function must be called before any other eloop_* function."]
    pub fn eloop_init() -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " eloop_register_read_sock - Register handler for read events"]
    #[doc = " @sock: File descriptor number for the socket"]
    #[doc = " @handler: Callback function to be called when data is available for reading"]
    #[doc = " @eloop_data: Callback context data (eloop_ctx)"]
    #[doc = " @user_data: Callback context data (sock_ctx)"]
    #[doc = " Returns: 0 on success, -1 on failure"]
    #[doc = ""]
    #[doc = " Register a read socket notifier for the given file descriptor. The handler"]
    #[doc = " function will be called whenever data is available for reading from the"]
    #[doc = " socket. The handler function is responsible for clearing the event after"]
    #[doc = " having processed it in order to avoid eloop from calling the handler again"]
    #[doc = " for the same event."]
    pub fn eloop_register_read_sock(
        sock: ::std::os::raw::c_int,
        handler: eloop_sock_handler,
        eloop_data: *mut ::std::os::raw::c_void,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " eloop_unregister_read_sock - Unregister handler for read events"]
    #[doc = " @sock: File descriptor number for the socket"]
    #[doc = ""]
    #[doc = " Unregister a read socket notifier that was previously registered with"]
    #[doc = " eloop_register_read_sock()."]
    pub fn eloop_unregister_read_sock(sock: ::std::os::raw::c_int);
}
extern "C" {
    #[doc = " eloop_register_sock - Register handler for socket events"]
    #[doc = " @sock: File descriptor number for the socket"]
    #[doc = " @type: Type of event to wait for"]
    #[doc = " @handler: Callback function to be called when the event is triggered"]
    #[doc = " @eloop_data: Callback context data (eloop_ctx)"]
    #[doc = " @user_data: Callback context data (sock_ctx)"]
    #[doc = " Returns: 0 on success, -1 on failure"]
    #[doc = ""]
    #[doc = " Register an event notifier for the given socket's file descriptor. The"]
    #[doc = " handler function will be called whenever the that event is triggered for the"]
    #[doc = " socket. The handler function is responsible for clearing the event after"]
    #[doc = " having processed it in order to avoid eloop from calling the handler again"]
    #[doc = " for the same event."]
    pub fn eloop_register_sock(
        sock: ::std::os::raw::c_int,
        type_: eloop_event_type,
        handler: eloop_sock_handler,
        eloop_data: *mut ::std::os::raw::c_void,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " eloop_unregister_sock - Unregister handler for socket events"]
    #[doc = " @sock: File descriptor number for the socket"]
    #[doc = " @type: Type of event for which sock was registered"]
    #[doc = ""]
    #[doc = " Unregister a socket event notifier that was previously registered with"]
    #[doc = " eloop_register_sock()."]
    pub fn eloop_unregister_sock(
        sock: ::std::os::raw::c_int,
        type_: eloop_event_type,
    );
}
extern "C" {
    #[doc = " eloop_register_event - Register handler for generic events"]
    #[doc = " @event: Event to wait (eloop implementation specific)"]
    #[doc = " @event_size: Size of event data"]
    #[doc = " @handler: Callback function to be called when event is triggered"]
    #[doc = " @eloop_data: Callback context data (eloop_data)"]
    #[doc = " @user_data: Callback context data (user_data)"]
    #[doc = " Returns: 0 on success, -1 on failure"]
    #[doc = ""]
    #[doc = " Register an event handler for the given event. This function is used to"]
    #[doc = " register eloop implementation specific events which are mainly targeted for"]
    #[doc = " operating system specific code (driver interface and l2_packet) since the"]
    #[doc = " portable code will not be able to use such an OS-specific call. The handler"]
    #[doc = " function will be called whenever the event is triggered. The handler"]
    #[doc = " function is responsible for clearing the event after having processed it in"]
    #[doc = " order to avoid eloop from calling the handler again for the same event."]
    #[doc = ""]
    #[doc = " In case of Windows implementation (eloop_win.c), event pointer is of HANDLE"]
    #[doc = " type, i.e., void*. The callers are likely to have 'HANDLE h' type variable,"]
    #[doc = " and they would call this function with eloop_register_event(h, sizeof(h),"]
    #[doc = " ...)."]
    pub fn eloop_register_event(
        event: *mut ::std::os::raw::c_void,
        event_size: size_t,
        handler: eloop_event_handler,
        eloop_data: *mut ::std::os::raw::c_void,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " eloop_unregister_event - Unregister handler for a generic event"]
    #[doc = " @event: Event to cancel (eloop implementation specific)"]
    #[doc = " @event_size: Size of event data"]
    #[doc = ""]
    #[doc = " Unregister a generic event notifier that was previously registered with"]
    #[doc = " eloop_register_event()."]
    pub fn eloop_unregister_event(
        event: *mut ::std::os::raw::c_void,
        event_size: size_t,
    );
}
extern "C" {
    #[doc = " eloop_register_timeout - Register timeout"]
    #[doc = " @secs: Number of seconds to the timeout"]
    #[doc = " @usecs: Number of microseconds to the timeout"]
    #[doc = " @handler: Callback function to be called when timeout occurs"]
    #[doc = " @eloop_data: Callback context data (eloop_ctx)"]
    #[doc = " @user_data: Callback context data (sock_ctx)"]
    #[doc = " Returns: 0 on success, -1 on failure"]
    #[doc = ""]
    #[doc = " Register a timeout that will cause the handler function to be called after"]
    #[doc = " given time."]
    pub fn eloop_register_timeout(
        secs: ::std::os::raw::c_uint,
        usecs: ::std::os::raw::c_uint,
        handler: eloop_timeout_handler,
        eloop_data: *mut ::std::os::raw::c_void,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " eloop_cancel_timeout - Cancel timeouts"]
    #[doc = " @handler: Matching callback function"]
    #[doc = " @eloop_data: Matching eloop_data or %ELOOP_ALL_CTX to match all"]
    #[doc = " @user_data: Matching user_data or %ELOOP_ALL_CTX to match all"]
    #[doc = " Returns: Number of cancelled timeouts"]
    #[doc = ""]
    #[doc = " Cancel matching <handler,eloop_data,user_data> timeouts registered with"]
    #[doc = " eloop_register_timeout(). ELOOP_ALL_CTX can be used as a wildcard for"]
    #[doc = " cancelling all timeouts regardless of eloop_data/user_data."]
    pub fn eloop_cancel_timeout(
        handler: eloop_timeout_handler,
        eloop_data: *mut ::std::os::raw::c_void,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " eloop_cancel_timeout_one - Cancel a single timeout"]
    #[doc = " @handler: Matching callback function"]
    #[doc = " @eloop_data: Matching eloop_data"]
    #[doc = " @user_data: Matching user_data"]
    #[doc = " @remaining: Time left on the cancelled timer"]
    #[doc = " Returns: Number of cancelled timeouts"]
    #[doc = ""]
    #[doc = " Cancel matching <handler,eloop_data,user_data> timeout registered with"]
    #[doc = " eloop_register_timeout() and return the remaining time left."]
    pub fn eloop_cancel_timeout_one(
        handler: eloop_timeout_handler,
        eloop_data: *mut ::std::os::raw::c_void,
        user_data: *mut ::std::os::raw::c_void,
        remaining: *mut os_reltime,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " eloop_is_timeout_registered - Check if a timeout is already registered"]
    #[doc = " @handler: Matching callback function"]
    #[doc = " @eloop_data: Matching eloop_data"]
    #[doc = " @user_data: Matching user_data"]
    #[doc = " Returns: 1 if the timeout is registered, 0 if the timeout is not registered"]
    #[doc = ""]
    #[doc = " Determine if a matching <handler,eloop_data,user_data> timeout is registered"]
    #[doc = " with eloop_register_timeout()."]
    pub fn eloop_is_timeout_registered(
        handler: eloop_timeout_handler,
        eloop_data: *mut ::std::os::raw::c_void,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " eloop_deplete_timeout - Deplete a timeout that is already registered"]
    #[doc = " @req_secs: Requested number of seconds to the timeout"]
    #[doc = " @req_usecs: Requested number of microseconds to the timeout"]
    #[doc = " @handler: Matching callback function"]
    #[doc = " @eloop_data: Matching eloop_data"]
    #[doc = " @user_data: Matching user_data"]
    #[doc = " Returns: 1 if the timeout is depleted, 0 if no change is made, -1 if no"]
    #[doc = " timeout matched"]
    #[doc = ""]
    #[doc = " Find a registered matching <handler,eloop_data,user_data> timeout. If found,"]
    #[doc = " deplete the timeout if remaining time is more than the requested time."]
    pub fn eloop_deplete_timeout(
        req_secs: ::std::os::raw::c_uint,
        req_usecs: ::std::os::raw::c_uint,
        handler: eloop_timeout_handler,
        eloop_data: *mut ::std::os::raw::c_void,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " eloop_replenish_timeout - Replenish a timeout that is already registered"]
    #[doc = " @req_secs: Requested number of seconds to the timeout"]
    #[doc = " @req_usecs: Requested number of microseconds to the timeout"]
    #[doc = " @handler: Matching callback function"]
    #[doc = " @eloop_data: Matching eloop_data"]
    #[doc = " @user_data: Matching user_data"]
    #[doc = " Returns: 1 if the timeout is replenished, 0 if no change is made, -1 if no"]
    #[doc = " timeout matched"]
    #[doc = ""]
    #[doc = " Find a registered matching <handler,eloop_data,user_data> timeout. If found,"]
    #[doc = " replenish the timeout if remaining time is less than the requested time."]
    pub fn eloop_replenish_timeout(
        req_secs: ::std::os::raw::c_uint,
        req_usecs: ::std::os::raw::c_uint,
        handler: eloop_timeout_handler,
        eloop_data: *mut ::std::os::raw::c_void,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " eloop_register_signal - Register handler for signals"]
    #[doc = " @sig: Signal number (e.g., SIGHUP)"]
    #[doc = " @handler: Callback function to be called when the signal is received"]
    #[doc = " @user_data: Callback context data (signal_ctx)"]
    #[doc = " Returns: 0 on success, -1 on failure"]
    #[doc = ""]
    #[doc = " Register a callback function that will be called when a signal is received."]
    #[doc = " The callback function is actually called only after the system signal"]
    #[doc = " handler has returned. This means that the normal limits for sighandlers"]
    #[doc = " (i.e., only \"safe functions\" allowed) do not apply for the registered"]
    #[doc = " callback."]
    pub fn eloop_register_signal(
        sig: ::std::os::raw::c_int,
        handler: eloop_signal_handler,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " eloop_register_signal_terminate - Register handler for terminate signals"]
    #[doc = " @handler: Callback function to be called when the signal is received"]
    #[doc = " @user_data: Callback context data (signal_ctx)"]
    #[doc = " Returns: 0 on success, -1 on failure"]
    #[doc = ""]
    #[doc = " Register a callback function that will be called when a process termination"]
    #[doc = " signal is received. The callback function is actually called only after the"]
    #[doc = " system signal handler has returned. This means that the normal limits for"]
    #[doc = " sighandlers (i.e., only \"safe functions\" allowed) do not apply for the"]
    #[doc = " registered callback."]
    #[doc = ""]
    #[doc = " This function is a more portable version of eloop_register_signal() since"]
    #[doc = " the knowledge of exact details of the signals is hidden in eloop"]
    #[doc = " implementation. In case of operating systems using signal(), this function"]
    #[doc = " registers handlers for SIGINT and SIGTERM."]
    pub fn eloop_register_signal_terminate(
        handler: eloop_signal_handler,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " eloop_register_signal_reconfig - Register handler for reconfig signals"]
    #[doc = " @handler: Callback function to be called when the signal is received"]
    #[doc = " @user_data: Callback context data (signal_ctx)"]
    #[doc = " Returns: 0 on success, -1 on failure"]
    #[doc = ""]
    #[doc = " Register a callback function that will be called when a reconfiguration /"]
    #[doc = " hangup signal is received. The callback function is actually called only"]
    #[doc = " after the system signal handler has returned. This means that the normal"]
    #[doc = " limits for sighandlers (i.e., only \"safe functions\" allowed) do not apply"]
    #[doc = " for the registered callback."]
    #[doc = ""]
    #[doc = " This function is a more portable version of eloop_register_signal() since"]
    #[doc = " the knowledge of exact details of the signals is hidden in eloop"]
    #[doc = " implementation. In case of operating systems using signal(), this function"]
    #[doc = " registers a handler for SIGHUP."]
    pub fn eloop_register_signal_reconfig(
        handler: eloop_signal_handler,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " eloop_sock_requeue - Requeue sockets"]
    #[doc = ""]
    #[doc = " Requeue sockets after forking because some implementations require this,"]
    #[doc = " such as epoll and kqueue."]
    pub fn eloop_sock_requeue() -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " eloop_run - Start the event loop"]
    #[doc = ""]
    #[doc = " Start the event loop and continue running as long as there are any"]
    #[doc = " registered event handlers. This function is run after event loop has been"]
    #[doc = " initialized with event_init() and one or more events have been registered."]
    pub fn eloop_run();
}
extern "C" {
    #[doc = " eloop_terminate - Terminate event loop"]
    #[doc = ""]
    #[doc = " Terminate event loop even if there are registered events. This can be used"]
    #[doc = " to request the program to be terminated cleanly."]
    pub fn eloop_terminate();
}
extern "C" {
    #[doc = " eloop_destroy - Free any resources allocated for the event loop"]
    #[doc = ""]
    #[doc = " After calling eloop_destroy(), other eloop_* functions must not be called"]
    #[doc = " before re-running eloop_init()."]
    pub fn eloop_destroy();
}
extern "C" {
    #[doc = " eloop_terminated - Check whether event loop has been terminated"]
    #[doc = " Returns: 1 = event loop terminate, 0 = event loop still running"]
    #[doc = ""]
    #[doc = " This function can be used to check whether eloop_terminate() has been called"]
    #[doc = " to request termination of the event loop. This is normally used to abort"]
    #[doc = " operations that may still be queued to be run when eloop_terminate() was"]
    #[doc = " called."]
    pub fn eloop_terminated() -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " eloop_wait_for_read_sock - Wait for a single reader"]
    #[doc = " @sock: File descriptor number for the socket"]
    #[doc = ""]
    #[doc = " Do a blocking wait for a single read socket."]
    pub fn eloop_wait_for_read_sock(sock: ::std::os::raw::c_int);
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct radius_hdr {
    pub code: u8_,
    pub identifier: u8_,
    pub length: be16,
    pub authenticator: [u8_; 16usize],
}
#[test]
fn bindgen_test_layout_radius_hdr() {
    assert_eq!(
        ::std::mem::size_of::<radius_hdr>(),
        20usize,
        concat!("Size of: ", stringify!(radius_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<radius_hdr>(),
        1usize,
        concat!("Alignment of ", stringify!(radius_hdr))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<radius_hdr>())).code as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(radius_hdr),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<radius_hdr>())).identifier as *const _
                as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(radius_hdr),
            "::",
            stringify!(identifier)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<radius_hdr>())).length as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(radius_hdr),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<radius_hdr>())).authenticator as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(radius_hdr),
            "::",
            stringify!(authenticator)
        )
    );
}
pub const RADIUS_CODE_ACCESS_REQUEST: _bindgen_ty_21 = 1;
pub const RADIUS_CODE_ACCESS_ACCEPT: _bindgen_ty_21 = 2;
pub const RADIUS_CODE_ACCESS_REJECT: _bindgen_ty_21 = 3;
pub const RADIUS_CODE_ACCOUNTING_REQUEST: _bindgen_ty_21 = 4;
pub const RADIUS_CODE_ACCOUNTING_RESPONSE: _bindgen_ty_21 = 5;
pub const RADIUS_CODE_ACCESS_CHALLENGE: _bindgen_ty_21 = 11;
pub const RADIUS_CODE_STATUS_SERVER: _bindgen_ty_21 = 12;
pub const RADIUS_CODE_STATUS_CLIENT: _bindgen_ty_21 = 13;
pub const RADIUS_CODE_DISCONNECT_REQUEST: _bindgen_ty_21 = 40;
pub const RADIUS_CODE_DISCONNECT_ACK: _bindgen_ty_21 = 41;
pub const RADIUS_CODE_DISCONNECT_NAK: _bindgen_ty_21 = 42;
pub const RADIUS_CODE_COA_REQUEST: _bindgen_ty_21 = 43;
pub const RADIUS_CODE_COA_ACK: _bindgen_ty_21 = 44;
pub const RADIUS_CODE_COA_NAK: _bindgen_ty_21 = 45;
pub const RADIUS_CODE_RESERVED: _bindgen_ty_21 = 255;
pub type _bindgen_ty_21 = u32;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct radius_attr_hdr {
    pub type_: u8_,
    pub length: u8_,
}
#[test]
fn bindgen_test_layout_radius_attr_hdr() {
    assert_eq!(
        ::std::mem::size_of::<radius_attr_hdr>(),
        2usize,
        concat!("Size of: ", stringify!(radius_attr_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<radius_attr_hdr>(),
        1usize,
        concat!("Alignment of ", stringify!(radius_attr_hdr))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<radius_attr_hdr>())).type_ as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(radius_attr_hdr),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<radius_attr_hdr>())).length as *const _
                as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(radius_attr_hdr),
            "::",
            stringify!(length)
        )
    );
}
pub const RADIUS_ATTR_USER_NAME: _bindgen_ty_22 = 1;
pub const RADIUS_ATTR_USER_PASSWORD: _bindgen_ty_22 = 2;
pub const RADIUS_ATTR_NAS_IP_ADDRESS: _bindgen_ty_22 = 4;
pub const RADIUS_ATTR_NAS_PORT: _bindgen_ty_22 = 5;
pub const RADIUS_ATTR_SERVICE_TYPE: _bindgen_ty_22 = 6;
pub const RADIUS_ATTR_FRAMED_IP_ADDRESS: _bindgen_ty_22 = 8;
pub const RADIUS_ATTR_FRAMED_MTU: _bindgen_ty_22 = 12;
pub const RADIUS_ATTR_REPLY_MESSAGE: _bindgen_ty_22 = 18;
pub const RADIUS_ATTR_STATE: _bindgen_ty_22 = 24;
pub const RADIUS_ATTR_CLASS: _bindgen_ty_22 = 25;
pub const RADIUS_ATTR_VENDOR_SPECIFIC: _bindgen_ty_22 = 26;
pub const RADIUS_ATTR_SESSION_TIMEOUT: _bindgen_ty_22 = 27;
pub const RADIUS_ATTR_IDLE_TIMEOUT: _bindgen_ty_22 = 28;
pub const RADIUS_ATTR_TERMINATION_ACTION: _bindgen_ty_22 = 29;
pub const RADIUS_ATTR_CALLED_STATION_ID: _bindgen_ty_22 = 30;
pub const RADIUS_ATTR_CALLING_STATION_ID: _bindgen_ty_22 = 31;
pub const RADIUS_ATTR_NAS_IDENTIFIER: _bindgen_ty_22 = 32;
pub const RADIUS_ATTR_PROXY_STATE: _bindgen_ty_22 = 33;
pub const RADIUS_ATTR_ACCT_STATUS_TYPE: _bindgen_ty_22 = 40;
pub const RADIUS_ATTR_ACCT_DELAY_TIME: _bindgen_ty_22 = 41;
pub const RADIUS_ATTR_ACCT_INPUT_OCTETS: _bindgen_ty_22 = 42;
pub const RADIUS_ATTR_ACCT_OUTPUT_OCTETS: _bindgen_ty_22 = 43;
pub const RADIUS_ATTR_ACCT_SESSION_ID: _bindgen_ty_22 = 44;
pub const RADIUS_ATTR_ACCT_AUTHENTIC: _bindgen_ty_22 = 45;
pub const RADIUS_ATTR_ACCT_SESSION_TIME: _bindgen_ty_22 = 46;
pub const RADIUS_ATTR_ACCT_INPUT_PACKETS: _bindgen_ty_22 = 47;
pub const RADIUS_ATTR_ACCT_OUTPUT_PACKETS: _bindgen_ty_22 = 48;
pub const RADIUS_ATTR_ACCT_TERMINATE_CAUSE: _bindgen_ty_22 = 49;
pub const RADIUS_ATTR_ACCT_MULTI_SESSION_ID: _bindgen_ty_22 = 50;
pub const RADIUS_ATTR_ACCT_LINK_COUNT: _bindgen_ty_22 = 51;
pub const RADIUS_ATTR_ACCT_INPUT_GIGAWORDS: _bindgen_ty_22 = 52;
pub const RADIUS_ATTR_ACCT_OUTPUT_GIGAWORDS: _bindgen_ty_22 = 53;
pub const RADIUS_ATTR_EVENT_TIMESTAMP: _bindgen_ty_22 = 55;
pub const RADIUS_ATTR_EGRESS_VLANID: _bindgen_ty_22 = 56;
pub const RADIUS_ATTR_NAS_PORT_TYPE: _bindgen_ty_22 = 61;
pub const RADIUS_ATTR_TUNNEL_TYPE: _bindgen_ty_22 = 64;
pub const RADIUS_ATTR_TUNNEL_MEDIUM_TYPE: _bindgen_ty_22 = 65;
pub const RADIUS_ATTR_TUNNEL_PASSWORD: _bindgen_ty_22 = 69;
pub const RADIUS_ATTR_CONNECT_INFO: _bindgen_ty_22 = 77;
pub const RADIUS_ATTR_EAP_MESSAGE: _bindgen_ty_22 = 79;
pub const RADIUS_ATTR_MESSAGE_AUTHENTICATOR: _bindgen_ty_22 = 80;
pub const RADIUS_ATTR_TUNNEL_PRIVATE_GROUP_ID: _bindgen_ty_22 = 81;
pub const RADIUS_ATTR_ACCT_INTERIM_INTERVAL: _bindgen_ty_22 = 85;
pub const RADIUS_ATTR_CHARGEABLE_USER_IDENTITY: _bindgen_ty_22 = 89;
pub const RADIUS_ATTR_NAS_IPV6_ADDRESS: _bindgen_ty_22 = 95;
pub const RADIUS_ATTR_ERROR_CAUSE: _bindgen_ty_22 = 101;
pub const RADIUS_ATTR_EAP_KEY_NAME: _bindgen_ty_22 = 102;
pub const RADIUS_ATTR_OPERATOR_NAME: _bindgen_ty_22 = 126;
pub const RADIUS_ATTR_LOCATION_INFO: _bindgen_ty_22 = 127;
pub const RADIUS_ATTR_LOCATION_DATA: _bindgen_ty_22 = 128;
pub const RADIUS_ATTR_BASIC_LOCATION_POLICY_RULES: _bindgen_ty_22 = 129;
pub const RADIUS_ATTR_EXTENDED_LOCATION_POLICY_RULES: _bindgen_ty_22 = 130;
pub const RADIUS_ATTR_LOCATION_CAPABLE: _bindgen_ty_22 = 131;
pub const RADIUS_ATTR_REQUESTED_LOCATION_INFO: _bindgen_ty_22 = 132;
pub const RADIUS_ATTR_GSS_ACCEPTOR_SERVICE_NAME: _bindgen_ty_22 = 164;
pub const RADIUS_ATTR_GSS_ACCEPTOR_HOST_NAME: _bindgen_ty_22 = 165;
pub const RADIUS_ATTR_GSS_ACCEPTOR_SERVICE_SPECIFICS: _bindgen_ty_22 = 166;
pub const RADIUS_ATTR_GSS_ACCEPTOR_REALM_NAME: _bindgen_ty_22 = 167;
pub const RADIUS_ATTR_MOBILITY_DOMAIN_ID: _bindgen_ty_22 = 177;
pub const RADIUS_ATTR_WLAN_HESSID: _bindgen_ty_22 = 181;
pub const RADIUS_ATTR_WLAN_REASON_CODE: _bindgen_ty_22 = 185;
pub const RADIUS_ATTR_WLAN_PAIRWISE_CIPHER: _bindgen_ty_22 = 186;
pub const RADIUS_ATTR_WLAN_GROUP_CIPHER: _bindgen_ty_22 = 187;
pub const RADIUS_ATTR_WLAN_AKM_SUITE: _bindgen_ty_22 = 188;
pub const RADIUS_ATTR_WLAN_GROUP_MGMT_CIPHER: _bindgen_ty_22 = 189;
pub type _bindgen_ty_22 = u32;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct radius_attr_vendor {
    pub vendor_type: u8_,
    pub vendor_length: u8_,
}
#[test]
fn bindgen_test_layout_radius_attr_vendor() {
    assert_eq!(
        ::std::mem::size_of::<radius_attr_vendor>(),
        2usize,
        concat!("Size of: ", stringify!(radius_attr_vendor))
    );
    assert_eq!(
        ::std::mem::align_of::<radius_attr_vendor>(),
        1usize,
        concat!("Alignment of ", stringify!(radius_attr_vendor))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<radius_attr_vendor>())).vendor_type
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(radius_attr_vendor),
            "::",
            stringify!(vendor_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<radius_attr_vendor>())).vendor_length
                as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(radius_attr_vendor),
            "::",
            stringify!(vendor_length)
        )
    );
}
pub const RADIUS_VENDOR_ATTR_MS_MPPE_SEND_KEY: _bindgen_ty_23 = 16;
pub const RADIUS_VENDOR_ATTR_MS_MPPE_RECV_KEY: _bindgen_ty_23 = 17;
pub type _bindgen_ty_23 = u32;
pub const RADIUS_VENDOR_ATTR_WFA_HS20_SUBSCR_REMEDIATION: _bindgen_ty_24 = 1;
pub const RADIUS_VENDOR_ATTR_WFA_HS20_AP_VERSION: _bindgen_ty_24 = 2;
pub const RADIUS_VENDOR_ATTR_WFA_HS20_STA_VERSION: _bindgen_ty_24 = 3;
pub const RADIUS_VENDOR_ATTR_WFA_HS20_DEAUTH_REQ: _bindgen_ty_24 = 4;
pub const RADIUS_VENDOR_ATTR_WFA_HS20_SESSION_INFO_URL: _bindgen_ty_24 = 5;
pub const RADIUS_VENDOR_ATTR_WFA_HS20_ROAMING_CONSORTIUM: _bindgen_ty_24 = 6;
pub const RADIUS_VENDOR_ATTR_WFA_HS20_T_C_FILENAME: _bindgen_ty_24 = 7;
pub const RADIUS_VENDOR_ATTR_WFA_HS20_TIMESTAMP: _bindgen_ty_24 = 8;
pub const RADIUS_VENDOR_ATTR_WFA_HS20_T_C_FILTERING: _bindgen_ty_24 = 9;
pub const RADIUS_VENDOR_ATTR_WFA_HS20_T_C_URL: _bindgen_ty_24 = 10;
pub type _bindgen_ty_24 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct radius_ms_mppe_keys {
    pub send: *mut u8_,
    pub send_len: size_t,
    pub recv: *mut u8_,
    pub recv_len: size_t,
}
#[test]
fn bindgen_test_layout_radius_ms_mppe_keys() {
    assert_eq!(
        ::std::mem::size_of::<radius_ms_mppe_keys>(),
        32usize,
        concat!("Size of: ", stringify!(radius_ms_mppe_keys))
    );
    assert_eq!(
        ::std::mem::align_of::<radius_ms_mppe_keys>(),
        8usize,
        concat!("Alignment of ", stringify!(radius_ms_mppe_keys))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<radius_ms_mppe_keys>())).send as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(radius_ms_mppe_keys),
            "::",
            stringify!(send)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<radius_ms_mppe_keys>())).send_len as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(radius_ms_mppe_keys),
            "::",
            stringify!(send_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<radius_ms_mppe_keys>())).recv as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(radius_ms_mppe_keys),
            "::",
            stringify!(recv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<radius_ms_mppe_keys>())).recv_len as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(radius_ms_mppe_keys),
            "::",
            stringify!(recv_len)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct radius_msg {
    _unused: [u8; 0],
}
extern "C" {
    pub fn radius_msg_get_hdr(msg: *mut radius_msg) -> *mut radius_hdr;
}
extern "C" {
    pub fn radius_msg_get_buf(msg: *mut radius_msg) -> *mut wpabuf;
}
extern "C" {
    pub fn radius_msg_new(code: u8_, identifier: u8_) -> *mut radius_msg;
}
extern "C" {
    pub fn radius_msg_free(msg: *mut radius_msg);
}
extern "C" {
    pub fn radius_msg_dump(msg: *mut radius_msg);
}
extern "C" {
    pub fn radius_msg_finish(
        msg: *mut radius_msg,
        secret: *const u8_,
        secret_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn radius_msg_finish_srv(
        msg: *mut radius_msg,
        secret: *const u8_,
        secret_len: size_t,
        req_authenticator: *const u8_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn radius_msg_finish_das_resp(
        msg: *mut radius_msg,
        secret: *const u8_,
        secret_len: size_t,
        req_hdr: *const radius_hdr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn radius_msg_finish_acct(
        msg: *mut radius_msg,
        secret: *const u8_,
        secret_len: size_t,
    );
}
extern "C" {
    pub fn radius_msg_finish_acct_resp(
        msg: *mut radius_msg,
        secret: *const u8_,
        secret_len: size_t,
        req_authenticator: *const u8_,
    );
}
extern "C" {
    pub fn radius_msg_verify_acct_req(
        msg: *mut radius_msg,
        secret: *const u8_,
        secret_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn radius_msg_verify_das_req(
        msg: *mut radius_msg,
        secret: *const u8_,
        secret_len: size_t,
        require_message_authenticator: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn radius_msg_add_attr(
        msg: *mut radius_msg,
        type_: u8_,
        data: *const u8_,
        data_len: size_t,
    ) -> *mut radius_attr_hdr;
}
extern "C" {
    pub fn radius_msg_parse(data: *const u8_, len: size_t) -> *mut radius_msg;
}
extern "C" {
    pub fn radius_msg_add_eap(
        msg: *mut radius_msg,
        data: *const u8_,
        data_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn radius_msg_get_eap(msg: *mut radius_msg) -> *mut wpabuf;
}
extern "C" {
    pub fn radius_msg_verify(
        msg: *mut radius_msg,
        secret: *const u8_,
        secret_len: size_t,
        sent_msg: *mut radius_msg,
        auth: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn radius_msg_verify_msg_auth(
        msg: *mut radius_msg,
        secret: *const u8_,
        secret_len: size_t,
        req_auth: *const u8_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn radius_msg_copy_attr(
        dst: *mut radius_msg,
        src: *mut radius_msg,
        type_: u8_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn radius_msg_make_authenticator(
        msg: *mut radius_msg,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn radius_msg_get_ms_keys(
        msg: *mut radius_msg,
        sent_msg: *mut radius_msg,
        secret: *const u8_,
        secret_len: size_t,
    ) -> *mut radius_ms_mppe_keys;
}
extern "C" {
    pub fn radius_msg_get_cisco_keys(
        msg: *mut radius_msg,
        sent_msg: *mut radius_msg,
        secret: *const u8_,
        secret_len: size_t,
    ) -> *mut radius_ms_mppe_keys;
}
extern "C" {
    pub fn radius_msg_add_mppe_keys(
        msg: *mut radius_msg,
        req_authenticator: *const u8_,
        secret: *const u8_,
        secret_len: size_t,
        send_key: *const u8_,
        send_key_len: size_t,
        recv_key: *const u8_,
        recv_key_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn radius_msg_add_wfa(
        msg: *mut radius_msg,
        subtype: u8_,
        data: *const u8_,
        len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn radius_user_password_hide(
        msg: *mut radius_msg,
        data: *const u8_,
        data_len: size_t,
        secret: *const u8_,
        secret_len: size_t,
        buf: *mut u8_,
        buf_len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn radius_msg_add_attr_user_password(
        msg: *mut radius_msg,
        data: *const u8_,
        data_len: size_t,
        secret: *const u8_,
        secret_len: size_t,
    ) -> *mut radius_attr_hdr;
}
extern "C" {
    pub fn radius_msg_get_attr(
        msg: *mut radius_msg,
        type_: u8_,
        buf: *mut u8_,
        len: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn radius_msg_get_vlanid(
        msg: *mut radius_msg,
        untagged: *mut ::std::os::raw::c_int,
        numtagged: ::std::os::raw::c_int,
        tagged: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn radius_msg_get_tunnel_password(
        msg: *mut radius_msg,
        keylen: *mut ::std::os::raw::c_int,
        secret: *const u8_,
        secret_len: size_t,
        sent_msg: *mut radius_msg,
        n: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn radius_msg_get_attr_ptr(
        msg: *mut radius_msg,
        type_: u8_,
        buf: *mut *mut u8_,
        len: *mut size_t,
        start: *const u8_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn radius_msg_count_attr(
        msg: *mut radius_msg,
        type_: u8_,
        min_len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct radius_attr_data {
    pub data: *mut u8_,
    pub len: size_t,
}
#[test]
fn bindgen_test_layout_radius_attr_data() {
    assert_eq!(
        ::std::mem::size_of::<radius_attr_data>(),
        16usize,
        concat!("Size of: ", stringify!(radius_attr_data))
    );
    assert_eq!(
        ::std::mem::align_of::<radius_attr_data>(),
        8usize,
        concat!("Alignment of ", stringify!(radius_attr_data))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<radius_attr_data>())).data as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(radius_attr_data),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<radius_attr_data>())).len as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(radius_attr_data),
            "::",
            stringify!(len)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct radius_class_data {
    pub attr: *mut radius_attr_data,
    pub count: size_t,
}
#[test]
fn bindgen_test_layout_radius_class_data() {
    assert_eq!(
        ::std::mem::size_of::<radius_class_data>(),
        16usize,
        concat!("Size of: ", stringify!(radius_class_data))
    );
    assert_eq!(
        ::std::mem::align_of::<radius_class_data>(),
        8usize,
        concat!("Alignment of ", stringify!(radius_class_data))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<radius_class_data>())).attr as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(radius_class_data),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<radius_class_data>())).count as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(radius_class_data),
            "::",
            stringify!(count)
        )
    );
}
extern "C" {
    pub fn radius_free_class(c: *mut radius_class_data);
}
extern "C" {
    pub fn radius_copy_class(
        dst: *mut radius_class_data,
        src: *const radius_class_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn radius_msg_find_unlisted_attr(
        msg: *mut radius_msg,
        attrs: *mut u8_,
    ) -> u8_;
}
extern "C" {
    pub fn radius_gen_session_id(
        id: *mut u8_,
        len: size_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct hostapd_ip_addr {
    pub af: ::std::os::raw::c_int,
    pub u: hostapd_ip_addr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union hostapd_ip_addr__bindgen_ty_1 {
    pub v4: in_addr,
    pub v6: in6_addr,
    pub max_len: [u8_; 16usize],
    _bindgen_union_align: [u32; 4usize],
}
#[test]
fn bindgen_test_layout_hostapd_ip_addr__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<hostapd_ip_addr__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(hostapd_ip_addr__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<hostapd_ip_addr__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(hostapd_ip_addr__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hostapd_ip_addr__bindgen_ty_1>())).v4
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hostapd_ip_addr__bindgen_ty_1),
            "::",
            stringify!(v4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hostapd_ip_addr__bindgen_ty_1>())).v6
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hostapd_ip_addr__bindgen_ty_1),
            "::",
            stringify!(v6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hostapd_ip_addr__bindgen_ty_1>())).max_len
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hostapd_ip_addr__bindgen_ty_1),
            "::",
            stringify!(max_len)
        )
    );
}
#[test]
fn bindgen_test_layout_hostapd_ip_addr() {
    assert_eq!(
        ::std::mem::size_of::<hostapd_ip_addr>(),
        20usize,
        concat!("Size of: ", stringify!(hostapd_ip_addr))
    );
    assert_eq!(
        ::std::mem::align_of::<hostapd_ip_addr>(),
        4usize,
        concat!("Alignment of ", stringify!(hostapd_ip_addr))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hostapd_ip_addr>())).af as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hostapd_ip_addr),
            "::",
            stringify!(af)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hostapd_ip_addr>())).u as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(hostapd_ip_addr),
            "::",
            stringify!(u)
        )
    );
}
extern "C" {
    pub fn hostapd_ip_txt(
        addr: *const hostapd_ip_addr,
        buf: *mut ::std::os::raw::c_char,
        buflen: size_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn hostapd_parse_ip_addr(
        txt: *const ::std::os::raw::c_char,
        addr: *mut hostapd_ip_addr,
    ) -> ::std::os::raw::c_int;
}
#[doc = " struct hostapd_radius_server - RADIUS server information for RADIUS client"]
#[doc = ""]
#[doc = " This structure contains information about a RADIUS server. The values are"]
#[doc = " mainly for MIB information. The MIB variable prefix (radiusAuth or"]
#[doc = " radiusAcc) depends on whether this is an authentication or accounting"]
#[doc = " server."]
#[doc = ""]
#[doc = " radiusAuthClientPendingRequests (or radiusAccClientPendingRequests) is the"]
#[doc = " number struct radius_client_data::msgs for matching msg_type."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct hostapd_radius_server {
    #[doc = " addr - radiusAuthServerAddress or radiusAccServerAddress"]
    pub addr: hostapd_ip_addr,
    #[doc = " port - radiusAuthClientServerPortNumber or radiusAccClientServerPortNumber"]
    pub port: ::std::os::raw::c_int,
    #[doc = " shared_secret - Shared secret for authenticating RADIUS messages"]
    pub shared_secret: *mut u8_,
    #[doc = " shared_secret_len - Length of shared_secret in octets"]
    pub shared_secret_len: size_t,
    #[doc = " index - radiusAuthServerIndex or radiusAccServerIndex"]
    pub index: ::std::os::raw::c_int,
    #[doc = " round_trip_time - radiusAuthClientRoundTripTime or radiusAccClientRoundTripTime"]
    #[doc = " Round-trip time in hundredths of a second."]
    pub round_trip_time: ::std::os::raw::c_int,
    #[doc = " requests - radiusAuthClientAccessRequests or radiusAccClientRequests"]
    pub requests: u32_,
    #[doc = " retransmissions - radiusAuthClientAccessRetransmissions or radiusAccClientRetransmissions"]
    pub retransmissions: u32_,
    #[doc = " access_accepts - radiusAuthClientAccessAccepts"]
    pub access_accepts: u32_,
    #[doc = " access_rejects - radiusAuthClientAccessRejects"]
    pub access_rejects: u32_,
    #[doc = " access_challenges - radiusAuthClientAccessChallenges"]
    pub access_challenges: u32_,
    #[doc = " responses - radiusAccClientResponses"]
    pub responses: u32_,
    #[doc = " malformed_responses - radiusAuthClientMalformedAccessResponses or radiusAccClientMalformedResponses"]
    pub malformed_responses: u32_,
    #[doc = " bad_authenticators - radiusAuthClientBadAuthenticators or radiusAccClientBadAuthenticators"]
    pub bad_authenticators: u32_,
    #[doc = " timeouts - radiusAuthClientTimeouts or radiusAccClientTimeouts"]
    pub timeouts: u32_,
    #[doc = " unknown_types - radiusAuthClientUnknownTypes or radiusAccClientUnknownTypes"]
    pub unknown_types: u32_,
    #[doc = " packets_dropped - radiusAuthClientPacketsDropped or radiusAccClientPacketsDropped"]
    pub packets_dropped: u32_,
}
#[test]
fn bindgen_test_layout_hostapd_radius_server() {
    assert_eq!(
        ::std::mem::size_of::<hostapd_radius_server>(),
        96usize,
        concat!("Size of: ", stringify!(hostapd_radius_server))
    );
    assert_eq!(
        ::std::mem::align_of::<hostapd_radius_server>(),
        8usize,
        concat!("Alignment of ", stringify!(hostapd_radius_server))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hostapd_radius_server>())).addr as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hostapd_radius_server),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hostapd_radius_server>())).port as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(hostapd_radius_server),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hostapd_radius_server>())).shared_secret
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(hostapd_radius_server),
            "::",
            stringify!(shared_secret)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hostapd_radius_server>())).shared_secret_len
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(hostapd_radius_server),
            "::",
            stringify!(shared_secret_len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hostapd_radius_server>())).index as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(hostapd_radius_server),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hostapd_radius_server>())).round_trip_time
                as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(hostapd_radius_server),
            "::",
            stringify!(round_trip_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hostapd_radius_server>())).requests
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(hostapd_radius_server),
            "::",
            stringify!(requests)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hostapd_radius_server>())).retransmissions
                as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(hostapd_radius_server),
            "::",
            stringify!(retransmissions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hostapd_radius_server>())).access_accepts
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(hostapd_radius_server),
            "::",
            stringify!(access_accepts)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hostapd_radius_server>())).access_rejects
                as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(hostapd_radius_server),
            "::",
            stringify!(access_rejects)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hostapd_radius_server>())).access_challenges
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(hostapd_radius_server),
            "::",
            stringify!(access_challenges)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hostapd_radius_server>())).responses
                as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(hostapd_radius_server),
            "::",
            stringify!(responses)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hostapd_radius_server>()))
                .malformed_responses as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(hostapd_radius_server),
            "::",
            stringify!(malformed_responses)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hostapd_radius_server>())).bad_authenticators
                as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(hostapd_radius_server),
            "::",
            stringify!(bad_authenticators)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hostapd_radius_server>())).timeouts
                as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(hostapd_radius_server),
            "::",
            stringify!(timeouts)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hostapd_radius_server>())).unknown_types
                as *const _ as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(hostapd_radius_server),
            "::",
            stringify!(unknown_types)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hostapd_radius_server>())).packets_dropped
                as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(hostapd_radius_server),
            "::",
            stringify!(packets_dropped)
        )
    );
}
#[doc = " struct hostapd_radius_servers - RADIUS servers for RADIUS client"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct hostapd_radius_servers {
    #[doc = " auth_servers - RADIUS Authentication servers in priority order"]
    pub auth_servers: *mut hostapd_radius_server,
    #[doc = " num_auth_servers - Number of auth_servers entries"]
    pub num_auth_servers: ::std::os::raw::c_int,
    #[doc = " auth_server - The current Authentication server"]
    pub auth_server: *mut hostapd_radius_server,
    #[doc = " acct_servers - RADIUS Accounting servers in priority order"]
    pub acct_servers: *mut hostapd_radius_server,
    #[doc = " num_acct_servers - Number of acct_servers entries"]
    pub num_acct_servers: ::std::os::raw::c_int,
    #[doc = " acct_server - The current Accounting server"]
    pub acct_server: *mut hostapd_radius_server,
    #[doc = " retry_primary_interval - Retry interval for trying primary server"]
    #[doc = ""]
    #[doc = " This specifies a retry interval in sexconds for trying to return to"]
    #[doc = " the primary RADIUS server. RADIUS client code will automatically try"]
    #[doc = " to use the next server when the current server is not replying to"]
    #[doc = " requests. If this interval is set (non-zero), the primary server"]
    #[doc = " will be retried after the specified number of seconds has passed"]
    #[doc = " even if the current used secondary server is still working."]
    pub retry_primary_interval: ::std::os::raw::c_int,
    #[doc = " msg_dumps - Whether RADIUS message details are shown in stdout"]
    pub msg_dumps: ::std::os::raw::c_int,
    #[doc = " client_addr - Client (local) address to use if force_client_addr"]
    pub client_addr: hostapd_ip_addr,
    #[doc = " force_client_addr - Whether to force client (local) address"]
    pub force_client_addr: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_hostapd_radius_servers() {
    assert_eq!(
        ::std::mem::size_of::<hostapd_radius_servers>(),
        80usize,
        concat!("Size of: ", stringify!(hostapd_radius_servers))
    );
    assert_eq!(
        ::std::mem::align_of::<hostapd_radius_servers>(),
        8usize,
        concat!("Alignment of ", stringify!(hostapd_radius_servers))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hostapd_radius_servers>())).auth_servers
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hostapd_radius_servers),
            "::",
            stringify!(auth_servers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hostapd_radius_servers>())).num_auth_servers
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hostapd_radius_servers),
            "::",
            stringify!(num_auth_servers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hostapd_radius_servers>())).auth_server
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hostapd_radius_servers),
            "::",
            stringify!(auth_server)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hostapd_radius_servers>())).acct_servers
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(hostapd_radius_servers),
            "::",
            stringify!(acct_servers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hostapd_radius_servers>())).num_acct_servers
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(hostapd_radius_servers),
            "::",
            stringify!(num_acct_servers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hostapd_radius_servers>())).acct_server
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(hostapd_radius_servers),
            "::",
            stringify!(acct_server)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hostapd_radius_servers>()))
                .retry_primary_interval as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(hostapd_radius_servers),
            "::",
            stringify!(retry_primary_interval)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hostapd_radius_servers>())).msg_dumps
                as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(hostapd_radius_servers),
            "::",
            stringify!(msg_dumps)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hostapd_radius_servers>())).client_addr
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(hostapd_radius_servers),
            "::",
            stringify!(client_addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<hostapd_radius_servers>())).force_client_addr
                as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(hostapd_radius_servers),
            "::",
            stringify!(force_client_addr)
        )
    );
}
#[doc = " RADIUS authentication"]
pub const RadiusType_RADIUS_AUTH: RadiusType = 0;
#[doc = " RADIUS_ACCT - RADIUS accounting"]
pub const RadiusType_RADIUS_ACCT: RadiusType = 1;
#[doc = " RADIUS_ACCT_INTERIM - RADIUS interim accounting message"]
#[doc = ""]
#[doc = " Used only with radius_client_send(). This behaves just like"]
#[doc = " RADIUS_ACCT, but removes any pending interim RADIUS Accounting"]
#[doc = " messages for the same STA before sending the new interim update."]
pub const RadiusType_RADIUS_ACCT_INTERIM: RadiusType = 2;
#[doc = " RadiusType - RADIUS server type for RADIUS client"]
pub type RadiusType = u32;
#[doc = " RADIUS_RX_PROCESSED - Message processed"]
#[doc = ""]
#[doc = " This stops handler calls and frees the message."]
pub const RadiusRxResult_RADIUS_RX_PROCESSED: RadiusRxResult = 0;
#[doc = " RADIUS_RX_QUEUED - Message has been queued"]
#[doc = ""]
#[doc = " This stops handler calls, but does not free the message; the handler"]
#[doc = " that returned this is responsible for eventually freeing the"]
#[doc = " message."]
pub const RadiusRxResult_RADIUS_RX_QUEUED: RadiusRxResult = 1;
#[doc = " RADIUS_RX_UNKNOWN - Message is not for this handler"]
pub const RadiusRxResult_RADIUS_RX_UNKNOWN: RadiusRxResult = 2;
#[doc = " RADIUS_RX_INVALID_AUTHENTICATOR - Message has invalid Authenticator"]
pub const RadiusRxResult_RADIUS_RX_INVALID_AUTHENTICATOR: RadiusRxResult = 3;
#[doc = " RadiusRxResult - RADIUS client RX handler result"]
pub type RadiusRxResult = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct radius_client_data {
    _unused: [u8; 0],
}
extern "C" {
    pub fn radius_client_register(
        radius: *mut radius_client_data,
        msg_type: RadiusType,
        handler: ::std::option::Option<
            unsafe extern "C" fn(
                msg: *mut radius_msg,
                req: *mut radius_msg,
                shared_secret: *const u8_,
                shared_secret_len: size_t,
                data: *mut ::std::os::raw::c_void,
            ) -> RadiusRxResult,
        >,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn radius_client_set_interim_error_cb(
        radius: *mut radius_client_data,
        cb: ::std::option::Option<
            unsafe extern "C" fn(
                addr: *const u8_,
                ctx: *mut ::std::os::raw::c_void,
            ),
        >,
        ctx: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn radius_client_send(
        radius: *mut radius_client_data,
        msg: *mut radius_msg,
        msg_type: RadiusType,
        addr: *const u8_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn radius_client_get_id(radius: *mut radius_client_data) -> u8_;
}
extern "C" {
    pub fn radius_client_flush(
        radius: *mut radius_client_data,
        only_auth: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn radius_client_init(
        ctx: *mut ::std::os::raw::c_void,
        conf: *mut hostapd_radius_servers,
    ) -> *mut radius_client_data;
}
extern "C" {
    pub fn radius_client_deinit(radius: *mut radius_client_data);
}
extern "C" {
    pub fn radius_client_flush_auth(
        radius: *mut radius_client_data,
        addr: *const u8_,
    );
}
extern "C" {
    pub fn radius_client_get_mib(
        radius: *mut radius_client_data,
        buf: *mut ::std::os::raw::c_char,
        buflen: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn radius_client_reconfig(
        radius: *mut radius_client_data,
        conf: *mut hostapd_radius_servers,
    );
}
extern "C" {
    pub fn _os_free(ptr: *mut ::std::os::raw::c_void);
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
